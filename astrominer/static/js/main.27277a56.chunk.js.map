{"version":3,"sources":["functions/utils.js","functions/constants.js","functions/game.js","functions/ai.js","functions/fly.js","functions/manage.js","functions/savegame.js","InfoFly.js","manage/ManagePlanet.js","manage/FactoryButton.js","manage/ManageFactory.js","manage/ManageStorage.js","manage/ManageSystem.js","manage/ManageTabs.js","InfoPanel.js","App.js","serviceWorker.js","index.js"],"names":["distanceBetween","ax","ay","bx","by","Math","sqrt","pow","midPoint","a","b","normalizeRadian","radians","retVal","PI","calcGravity","x","y","planet","distance","gravityDirection","atan2","c","GRAVITATIONAL_CONST","mass","sin","cos","dir","directionTo","x1","y1","x2","y2","dirComponents","amount","xAmt","yAmt","randomInt","minP","maxP","min","ceil","max","floor","random","randomFloat","randomBool","getPointFrom","startX","startY","getVertexData","sprite","calculateVertices","collisionPoints","push","toGlobal","vertexData","globalX","globalY","spriteX","spriteY","HALF_SCREEN_WIDTH","HALF_SCREEN_HEIGHT","keyboardListener","value","key","isDown","isUp","press","undefined","release","downHandler","event","upHandler","downListener","bind","upListener","window","addEventListener","unsubscribe","removeEventListener","showToast","text","Swal","fire","title","timer","position","showConfirmButton","toast","width","SCREEN_WIDTH","showClass","popup","hideClass","then","BLACK","YELLOW","BLUE","WHITE","DARK_GREY","LIGHT_GREY","GAME_STATE","INIT","FLY","MANAGE","LOCALSTORAGE_GAME_NAMES_KEY","DB_GAME_PREFIX","SCREEN_HEIGHT","MINIMAP_WIDTH","MINIMAP_HEIGHT","HALF_MINIMAP_WIDTH","HALF_MINIMAP_HEIGHT","MINIMAP_VIEW_WIDTH","MINIMAP_VIEW_HEIGHT","HALF_MINIMAP_VIEW_WIDTH","HALF_MINIMAP_VIEW_HEIGHT","MINIMAP_SCALE_X","MINIMAP_SCALE_Y","MINIMAP_BORDER_COLOR","MINIMAP_BACKGROUND_COLOR","MINIMAP_PLANET_COLOR","MINIMAP_SELECTED_PLANET_COLOR","MINIMAP_BUILDING_COLOR","MINIMAP_SHIP_COLOR","SPRITESHEET_JSON","ROCK_PLANET_FILE","RED_PLANET_FILE","PURPLE_PLANET_FILE","GREEN_PLANET_FILE","MINE_FILE","FACTORY_FILE","SHIP_CARGO_FILE","SHIP_EXPLORER_FILE","SHIP_FAST_FILE","SHIP_SKELETON_FILE","SHIP_FIGHTER_FILE","SHIP_HEAVY_FILE","SHIP_BALL_FILE","STAR_BACKGROUND_FILE","CRASH_JSON","CRASH","BULLET_FILE","BULLET_BLUE_FILE","BULLET_STAPLE_FILE","SHIELD_BLUE_FILE","ALIEN_SHIP_FILE","ALIEN_SHIP_SMALL_FILE","ALIEN_SHIP_LARGE_FILE","ALIEN_SHIP_FIRE_FILE","ALIEN_SHIP_BLUE_FILE","ALIEN_SHIP_LARGE_BLUE_FILE","ALIEN_SHIP_BLACK_FILE","UNIVERSE_RADIUS","PLANET_CACHE_STEP_SIZE","PLANET_CACHE_NUM_STEPS","PLAYER","ALIEN","PLAYER_STARTING_RESOURCES","titanium","gold","uranium","ALLOWED_OVERLAP","TAKEOFF_SPEED","PLANET_RESOURCE_MAX","PLAYER_START_X","PLAYER_START_Y","NUM_ALIENS","MIN_ALIEN_DIST_TO_PLANET","MIN_ALIEN_DIST_TO_ALIEN","BUILDING_PLACEMENT_ROTATION_INCREMENT","BUILDING_TYPE_MINE","MINE_SCALE","MINE_WIDTH","MINE_ANIMATION_SPEED","MINE_SPEED_TITANIUM","MINE_SPEED_GOLD","MINE_SPEED_URANIUM","MINE_COST","BUILDING_TYPE_FACTORY","FACTORY_COST","FACTORY_WIDTH","FACTORY_SCALE","EQUIP_TYPE_BRAKE","EQUIP_TYPE_PRIMARY_WEAPON","EQUIP_TYPE_SECONDARY_WEAPON","EQUIP_TYPE_THRUSTER","EQUIP_TYPE_ARMOR","EQUIP_TYPE_REPAIR_DROID","EQUIP_TYPE_GUNNERY_DROID","EQUIP_TYPE_SPEED","EQUIP_TYPE_TURN","EQUIP_TYPE_STORAGE","THRUST_MOMENTUM","THRUST_BLINK","OBJ_EQUIP","OBJ_SHIP","ALIEN_AI_TURRET","ALIEN_AI_CREEPER","EQUIP_AI_MINE","EQUIP_AI_TURRET","EQUIP_AI_MISSILE","DIR_AHEAD_OF_SHIP","DIR_BEHIND_SHIP","EQUIP_BRAKE","name","objType","type","brakeSpeedPct","cost","EQUIP_BLINK_BRAKE","EQUIP_SPEED_BOOST","boostSpeed","EQUIP_TURN_BOOST","EQUIP_STORAGE","storageAmount","EQUIP_BLASTER","coolTime","cool","damage","speed","lifetime","bulletFile","EQUIP_FAST_BLASTER","EQUIP_SPRINKLER_BLASTER","jitter","EQUIP_STREAM_BLASTER","EQUIP_THRUSTER","thrustSpeed","thrustType","EQUIP_BLINK_THRUSTER","EQUIP_R2D2","repairSpeed","EQUIP_GUNNERY_DROID","weapon","EQUIP_ALIEN_BLASTER","EQUIP_STAPLE_GUN","EQUIP_ARMOR","armorAmt","EQUIP_SHIELD","shield","active","armor","armorMax","lifetimeMax","spriteFile","radius","SHIP_EXPLORER","propulsion","turnSpeed","resourcesMax","resources","equipMax","equip","crashSpeed","crashAngle","imageScale","imageFile","SHIP_CARGO","SHIP_FAST","SHIP_SKELETON","SHIP_HEAVY","SHIP_FIGHTER","SHIP_ALIEN_TURRET","aiType","SHIP_ALIEN","SHIP_ALIEN_LARGE","SHIP_ALIEN_FIRE","SHIP_ALIEN_STEALTH","SHIP_MINE","aiData","mineDistance","SHIP_TURRET","SHIP_MISSILE","ALL_SHIPS","EQUIP_MINE_DEPLOYER","createShip","EQUIP_TURRET_DEPLOYER","EQUIP_MISSILE_LAUNCHER","EQUIP_BRAKES","EQUIP_THRUSTERS","EQUIP_UPGRADES","EQUIP_PRIMARY_WEAPONS","EQUIP_SECONDARY_WEAPONS","EQUIP_MISC","ALL_EQUIP","XP_LEVELS","xp","obj","PLANET_DENSITY","Map","set","UNIVERSE_RINGS","planetCount","minDist","maxDist","minDistToOtherPlanet","minPlanetRadius","maxPlanetRadius","planetFiles","aliens","count","file","createEmptyWorld","saveGameName","ship","view","planets","selectedPlanet","lastPlanetLanded","blueprints","xpLevels","lodash","cloneDeep","nextId","system","keys","app","gameState","isTyping","gameLoop","bgSprite","explosionSheet","explosions","bullets","planetSpriteCache","shipSpriteCache","shieldSpriteCache","spriteContainers","background","ships","minimap","miniMapGraphics","initializing","setupWorld","world","setupSpriteContainers","createBackground","createPlanets","shipStartX","shipStartY","getShipSprite","visible","createAliens","setupMiniMap","setupExplosionSheet","setupPlanetCache","mainStage","stage","PIXI","Container","addChild","container","TilingSprite","Texture","from","ring","i","fileName","utils","length","String","fromCharCode","get","maxResource","minResource","createPlanet","getFreeXy","nearestPlanetDistance","origPlanet","nearestPlanet","dist","nearestPlanetDist","nearestAlienDistance","nearestAlien","alien","nearestAlienDist","minDistToPlanet","minDistToAlien","failCount","np","console","warn","planetFile","stored","raw","buildings","lastLandingDir","spriteId","getPlanetSprite","planetContainer","planetSprite","Sprite","loader","textures","anchor","spriteScale","scale","building","manage","makeBuildingSprite","entries","foundSprite","rotation","spriteWidth","spriteHeight","height","spriteSheet","getSpriteOrigWithHeight","origWidth","origHeight","getShieldSprite","cacheId","id","shieldSprite","shipSprite","shieldWidth","shipType","owner","vx","vy","alive","createAlien","alienInfo","miniMapContainer","mask","Graphics","drawRect","renderable","cacheAsBitmap","g","click","data","global","fly","clickOnMinimap","changeGameState","newState","enterFlyState","flyLoop","enterManageState","manageLoop","runBuildings","mineResource","children","buildingSprite","animationSpeed","resourceType","nextLevel","addBlueprint","shift","addMiningXp","addAlienXp","canAfford","payResourceCost","payResource","paid","Loader","shared","spritesheet","createExplosionSprite","AnimatedSprite","animations","loop","planetCache","Array","stepX","stepY","minX","maxX","minY","maxY","stepPlanets","getPlanetsNear","moveAliens","hasMoved","turretAi","creeperAi","playerTurretAi","playerMissileAi","checkForCollisionWithPlanet","checkForCollisionWithShip","alienSprite","shootAt","shooter","firePrimaryWeapon","turret","getNearestAlienTarget","target","primaryWeaponRange","missile","dirToTarget","moved","distanceToPlayer","dirToPlayer","game","dirToPlanet","dirDiff","rightLeft","abs","turnDir","destroyShip","otherShip","shipsCollide","log","delta","runDroids","left","turnShip","right","d","up","w","booster","getEquip","propelShip","down","s","brake","brakeShip","space","fireSecondaryWeapon","q","thrustShip","e","planetsInView","planetInView","grav","detectCollisionWithPlanet","landShip","detectCollisionWithAlien","moveExplosions","moveBackground","drawMiniMap","repositionScreen","ai","coolAllWeapons","coolWeapons","disableShield","resetWeaponsCool","droid","shootAtNearestAlien","weaponRange","origDir","fireWeapon","tilePosition","getActiveShield","point","planetDir","success","speedDiff","dirDiffAdj","damageShip","resetGame","r","getExplosionSprite","explosionSprite","playerShip","afterExplosion","play","onLoop","stop","getAvailablePlanetXY","turnBooster","thruster","thrustX","thrustY","fireBullet","gun","mine","mineSprite","mineDistFromShip","enableShield","bullet","findOrCreateBullet","jitterAmt","killBullet","moveBullets","checkForBulletCollision","bulletHitShip","containsPoint","shipDamage","alienDamage","equipType","t","clear","beginFill","lineStyle","endFill","planetOnMap","planetColor","drawCircle","buildingX","buildingY","clickX","clickY","gravity","takeOff","getBuildingInfo","buildingType","animation","buildMine","getBuildingPlacementRotation","distanceFromShip","deg","degX","degY","buildingWidth","buildingFits","minBuildingWidth","transferResource","source","requestedAmtStr","maxCapacity","requestedAmt","Number","isNaN","amt","spaceLeft","buildFactory","factory","buildShip","shipTemplate","newShip","switchToShip","oldShip","removeShipFromStorage","addShipToStorage","newShipSprite","filter","removedShip","hasFactory","buildEquip","equipTemplate","costToRepair","repairShip","addArmor","titaniumOnHand","addEquip","newEquip","moveEquipFromPlanetToShip","equipToMove","remove","moveEquipFromShipToPlanet","shipResources","owing","this","removeResource","canEquip","includes","find","eq","saveLocalStorage","objToSave","localStorage","getItem","removeItem","setItem","JSON","stringify","loadLocalStorage","objString","parse","upgradeDB","db","result","oldVersion","deleteObjectStore","createObjectStore","keyPath","loadWorld","dbRequest","indexedDB","open","onerror","onupgradeneeded","onsuccess","request","transaction","objectStore","newWorld","oldSystem","removeChildren","saveWorld","worldToStore","omit","objectStoreRequest","put","deleteWorld","delete","InfoFly","className","map","React","Component","ManagePlanet","props","state","Object","assign","setState","shipOnPlanet","disabled","onClick","onChange","valueChanged","FactoryButton","template","build","ManageFactory","ManageStorage","selectedShip","currentShip","selectedShipEquip","concat","viewShip","startUsingShip","ManageSystem","nameInput","useRef","gameNames","savegame","addGameName","newGameName","onFocus","onBlur","ref","current","saveGame","gameName","deleteGame","ManageTabs","TABS","useState","selectedTab","setSelectedTab","tab","InfoPanel","App","createPixiApp","Application","renderer","backgroundColor","pixiRef","appendChild","add","load","setupGame","setupKeyboardListeners","plugins","interaction","on","ticker","mainLoop","forceUpdate","createRef","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27277a56.chunk.js","sourcesContent":["import { c } from './';\nimport Swal from \"sweetalert2\";\n\n/**\n * Returns the distance between two points \n */\nexport function distanceBetween(ax, ay, bx, by) {\n  return Math.sqrt(Math.pow(ax - bx, 2) + Math.pow(ay - by, 2));\n}\n  \n/**\n * Returns array with [x,y] of midpoint between two points\n * Both params should be [x,y]\n */\nexport function midPoint(a, b) {\n  return [(a[0]+b[0])/2, (a[1]+b[1])/2];\n}\n\n/**\n * Convert the angle to 0 <= rad <= 2*PI \n */\nexport function normalizeRadian(radians) {\n  let retVal = radians;\n  if (retVal < 0) {\n    retVal += Math.PI * 2;\n  }\n  if (retVal > Math.PI * 2) {\n    retVal -= Math.PI * 2;\n  }\n  return retVal;\n}\n  \n/**\n * Calc gravity for point.\n * @return {x,y,dir} This will be the x and y forces applied to the object (not a point)\n */\nexport function calcGravity(x, y, planet) {\n  let distance = distanceBetween(x, y, planet.x, planet.y);\n  if (distance < 10) {\n    distance = 10;\n  }\n  let gravityDirection = Math.atan2(x - planet.x, y - planet.y);\n  let gravityX = c.GRAVITATIONAL_CONST * planet.mass / Math.pow(distance, 2) * -Math.sin(gravityDirection);\n  let gravityY = c.GRAVITATIONAL_CONST * planet.mass / Math.pow(distance, 2) * -Math.cos(gravityDirection);\n  return {x:gravityX, y:gravityY, dir:gravityDirection};\n}\n\n/**\n * @return the angle x1,y1 would need to face to point directly at x2,y2\n */\nexport function directionTo(x1,y1, x2,y2) {\n  return normalizeRadian(Math.atan2(y2 - y1, x2 - x1));\n}\n\n/**\n * @return {xAmt, yAmt} splitting the dir and amount into x,y portions\n */\nexport function dirComponents(dir, amount) {\n  let xAmt = amount * Math.cos(dir);\n  let yAmt = amount * Math.sin(dir);\n  return {xAmt, yAmt};\n}\n\n/**\n * @return an int between min and max inclusive\n */\nexport function randomInt(minP, maxP) {\n  let min = Math.ceil(minP);\n  let max = Math.floor(maxP);\n  return Math.floor(Math.random() * (max - min +1) + min); \n}\n\n/**\n * @return a random floating point number between min and max\n */\nexport function randomFloat(min, max) {\n  return min + (Math.random() * (max - min));\n}\n\n/**\n * @return true 50% of the time\n */\nexport function randomBool() {\n  return Math.random() > 0.5;\n}\n\n/**\n * @return add distance in direction to startX,startY \n */\nexport function getPointFrom(startX, startY, dir, distance) {\n  let x = startX + (distance * Math.cos(dir));\n  let y = startY + (distance * Math.sin(dir));\n  return {x,y};\n}\n\n/**\n * @return a collection of points [[x,y],[x,y]] on a rectangular sprite that can be used for collision detection\n * @param x,y global x,y position of sprite (on main map, not in viewport)\n */\nexport function getVertexData(x,y, sprite) {\n  sprite.calculateVertices();\n  let collisionPoints = []; // [[x,y],[x,y]]\n  collisionPoints.push(toGlobal(x, y, sprite.vertexData[0], sprite.vertexData[1])); // top left\n  collisionPoints.push(toGlobal(x, y, sprite.vertexData[2], sprite.vertexData[3])); // top right\n  collisionPoints.push(toGlobal(x, y, sprite.vertexData[4], sprite.vertexData[5])); // bottom right\n  collisionPoints.push(toGlobal(x, y, sprite.vertexData[6], sprite.vertexData[7])); // bottom left\n  // Add a few points between to help with border collisions (these have already been converted to global)\n  collisionPoints.push(midPoint(collisionPoints[0], collisionPoints[1]));\n  collisionPoints.push(midPoint(collisionPoints[1], collisionPoints[2]));\n  collisionPoints.push(midPoint(collisionPoints[2], collisionPoints[3]));\n  collisionPoints.push(midPoint(collisionPoints[3], collisionPoints[0]));\n  return collisionPoints;\n}\n\n/**\n * Converts the local sprite-based x,y to global based on ship's position\n * @return [x,y] in global map coordinates\n */\nexport function toGlobal(globalX,globalY, spriteX,spriteY) {\n  return [globalX + (spriteX - c.HALF_SCREEN_WIDTH), globalY+ (spriteY - c.HALF_SCREEN_HEIGHT)];\n}\n\n/**\n * Sets up a keyboard listener\n */\nexport function keyboardListener(value) {\n  let key = {};\n  key.value = value;\n  key.isDown = false;\n  key.isUp = true;\n  key.press = undefined;\n  key.release = undefined;\n  //The `downHandler`\n  key.downHandler = event => {\n    if (event.key === key.value) {\n      if (key.isUp && key.press) key.press();\n      key.isDown = true;\n      key.isUp = false;\n    }\n  };\n  //The `upHandler`\n  key.upHandler = event => {\n    if (event.key === key.value) {\n      if (key.isDown && key.release) key.release();\n      key.isDown = false;\n      key.isUp = true;\n    }\n  };\n  //Attach event listeners\n  const downListener = key.downHandler.bind(key);\n  const upListener = key.upHandler.bind(key);\n  window.addEventListener(\n    \"keydown\", downListener, false\n  );\n  window.addEventListener(\n    \"keyup\", upListener, false\n  );\n  // Detach event listeners\n  key.unsubscribe = () => {\n    window.removeEventListener(\"keydown\", downListener);\n    window.removeEventListener(\"keyup\", upListener);\n  };\n  return key;\n}\n\nexport function showToast(text) {\n  Swal.fire({\n    title: text,\n    timer: 5000,\n    position:'top',\n    showConfirmButton: false,\n    toast:true,\n    width: Math.floor(c.SCREEN_WIDTH/2)+'px',\n    showClass: {\n      popup: 'animate__animated animate__slideInDown'\n    },\n    hideClass: {\n      popup: 'animate__animated animate__slideOutUp'\n    }\n  }).then();\n}","// Colors\nexport const BLACK = 0X000000;\nexport const YELLOW = 0xCC55CC;\nexport const BLUE = 0x00AAFF;\nexport const WHITE = 0xFFFFFF;\nexport const DARK_GREY = 0x303030;\nexport const LIGHT_GREY = 0x909090;\n\nexport const GAME_STATE = {\n  INIT: \"init\",\n  FLY: \"fly\",\n  MANAGE: \"manage\"\n};\n\n// Saved games\nexport const LOCALSTORAGE_GAME_NAMES_KEY = 'saved-game-names';\nexport const DB_GAME_PREFIX = 'game-';\n\n// Screen Layout\nexport const SCREEN_WIDTH = 1000;\nexport const SCREEN_HEIGHT = 1000;\nexport const HALF_SCREEN_WIDTH = SCREEN_WIDTH / 2;\nexport const HALF_SCREEN_HEIGHT = SCREEN_HEIGHT / 2;\n// size of minimap on screen\nexport const MINIMAP_WIDTH = 120; \nexport const MINIMAP_HEIGHT = 120;\nexport const HALF_MINIMAP_WIDTH = MINIMAP_WIDTH / 2; \nexport const HALF_MINIMAP_HEIGHT = MINIMAP_HEIGHT / 2;\n// how far the minimap can view\nexport const MINIMAP_VIEW_WIDTH = 4000; \nexport const MINIMAP_VIEW_HEIGHT = 4000; \nexport const HALF_MINIMAP_VIEW_WIDTH = MINIMAP_VIEW_WIDTH / 2;\nexport const HALF_MINIMAP_VIEW_HEIGHT = MINIMAP_VIEW_HEIGHT / 2;\n// convert minimap pixels to real pixels\nexport const MINIMAP_SCALE_X = MINIMAP_WIDTH / MINIMAP_VIEW_WIDTH;  \nexport const MINIMAP_SCALE_Y = MINIMAP_HEIGHT / MINIMAP_VIEW_HEIGHT; \n\n// MiniMap colors\nexport const MINIMAP_BORDER_COLOR = LIGHT_GREY;\nexport const MINIMAP_BACKGROUND_COLOR = DARK_GREY;\nexport const MINIMAP_PLANET_COLOR = LIGHT_GREY;\nexport const MINIMAP_SELECTED_PLANET_COLOR = YELLOW;\nexport const MINIMAP_BUILDING_COLOR = BLUE;\nexport const MINIMAP_SHIP_COLOR = WHITE;\n\n\n// Files\nexport const SPRITESHEET_JSON = \"images/spritesheet.json\";\nexport const ROCK_PLANET_FILE = \"rock_planet.png\";\nexport const RED_PLANET_FILE = \"red_planet.png\";\nexport const PURPLE_PLANET_FILE = \"purple_planet.png\";\nexport const GREEN_PLANET_FILE = \"green_planet.png\";\nexport const MINE_FILE = \"mine\"; // animation name in json\nexport const FACTORY_FILE = \"factory.png\";\nexport const SHIP_CARGO_FILE = \"ship_cargo.png\";\nexport const SHIP_EXPLORER_FILE = \"ship_explorer.png\";\nexport const SHIP_FAST_FILE = \"ship_fast.png\";\nexport const SHIP_SKELETON_FILE = \"ship_skeleton.png\";\nexport const SHIP_FIGHTER_FILE = \"ship_fighter.png\";\nexport const SHIP_HEAVY_FILE = \"ship_heavy.png\";\nexport const SHIP_BALL_FILE = \"ship_ball.png\";\nexport const STAR_BACKGROUND_FILE = \"images/stars.png\";\nexport const CRASH_JSON = \"images/crash.json\";\nexport const CRASH = \"crash\"; // animation name in json\nexport const BULLET_FILE = \"bullet.png\";\nexport const BULLET_BLUE_FILE = \"bullet_blue.png\";\nexport const BULLET_STAPLE_FILE = \"bullet_white.png\";\nexport const SHIELD_BLUE_FILE = \"shield_blue.png\";\n//export const SHIELD_WHITE_FILE = \"shield_white.png\";\n//export const SHIELD_GREEN_FILE = \"shield_green.png\";\nexport const ALIEN_SHIP_FILE = \"alien.png\";\nexport const ALIEN_SHIP_SMALL_FILE = \"alien_small.png\";\nexport const ALIEN_SHIP_LARGE_FILE = \"alien_large.png\";\nexport const ALIEN_SHIP_FIRE_FILE = \"alien_fire.png\";\nexport const ALIEN_SHIP_BLUE_FILE = \"alien_blue.png\";\nexport const ALIEN_SHIP_LARGE_BLUE_FILE = \"alien_large_blue.png\";\nexport const ALIEN_SHIP_BLACK_FILE = \"ship_black.png\";\n\nexport const UNIVERSE_RADIUS = 30000;\nexport const PLANET_CACHE_STEP_SIZE = SCREEN_WIDTH;\nexport const PLANET_CACHE_NUM_STEPS = UNIVERSE_RADIUS * 2 / PLANET_CACHE_STEP_SIZE;\nexport const PLAYER = \"player\";\nexport const ALIEN = \"alien\";\nexport const PLAYER_STARTING_RESOURCES = {titanium:30, gold:20, uranium:0};\nexport const GRAVITATIONAL_CONST = 2;\nexport const ALLOWED_OVERLAP = 2; // overlap for fudging collision detection\nexport const TAKEOFF_SPEED = 10; // in units of planet gravity\nexport const PLANET_RESOURCE_MAX = 99999999;\nexport const PLAYER_START_X = -(UNIVERSE_RADIUS + 1000); // left of the universe\nexport const PLAYER_START_Y = 0;\nexport const NUM_ALIENS = 1000;\nexport const MIN_ALIEN_DIST_TO_PLANET = 50;\nexport const MIN_ALIEN_DIST_TO_ALIEN = 3;\n\n// Buildings\nexport const BUILDING_PLACEMENT_ROTATION_INCREMENT = 0.05;\n// Mine\nexport const BUILDING_TYPE_MINE = \"mine\";\nexport const MINE_SCALE = 1;\nexport const MINE_WIDTH = 52;\nexport const MINE_ANIMATION_SPEED = 0.5;\nexport const MINE_SPEED_TITANIUM = 0.0166; // 1 every sec\nexport const MINE_SPEED_GOLD = 0.0083;  // 1 every 2 sec\nexport const MINE_SPEED_URANIUM = 0.0033; // 1 every 5 sec\nexport const MINE_COST = {titanium:20, gold:10, uranium:0};\n// Factory\nexport const BUILDING_TYPE_FACTORY = \"factory\";\nexport const FACTORY_COST = {titanium:50, gold:20, uranium:10};\nexport const FACTORY_WIDTH = 91;\nexport const FACTORY_SCALE = 0.8;\n\n// Equipment\nexport const EQUIP_TYPE_BRAKE = \"Brake\";\nexport const EQUIP_TYPE_PRIMARY_WEAPON = \"Primary Weapon\";\nexport const EQUIP_TYPE_SECONDARY_WEAPON = \"Secondary Weapon\";\nexport const EQUIP_TYPE_THRUSTER = \"Thruster\";\nexport const EQUIP_TYPE_ARMOR = \"Armor\";\nexport const EQUIP_TYPE_REPAIR_DROID = \"Repair Droid\";\nexport const EQUIP_TYPE_GUNNERY_DROID = \"Gunnery Droid\";\nexport const EQUIP_TYPE_SPEED = \"Speed\";\nexport const EQUIP_TYPE_TURN = \"Turn\";\nexport const EQUIP_TYPE_STORAGE = \"Storage\";\n\nexport const THRUST_MOMENTUM = \"Thrust Momentum\";\nexport const THRUST_BLINK = \"Thrust Blink\";\n\nexport const OBJ_EQUIP = \"Equip\";\nexport const OBJ_SHIP = \"Ship\";\n\nexport const ALIEN_AI_TURRET = \"ALIEN_AI_TURRET\";\nexport const ALIEN_AI_CREEPER = \"ALIEN_AI_CREEPER\";\nexport const EQUIP_AI_MINE = \"EQUIP_AI_MINE\";\nexport const EQUIP_AI_TURRET = \"EQUIP_AI_TURRET\";\nexport const EQUIP_AI_MISSILE = \"EQUIP_AI_MISSILE\";\n\nexport const DIR_AHEAD_OF_SHIP = \"ahead\";\nexport const DIR_BEHIND_SHIP = \"behind\";\n\n// brakeSpeedPct is best between 0.02 - 0.1 (higher is ok)  \nexport const EQUIP_BRAKE = {name: \"Brake\", objType:OBJ_EQUIP, type:EQUIP_TYPE_BRAKE, brakeSpeedPct:0.04, \n                            cost: {titanium:20, gold:10, uranium:0} };\nexport const EQUIP_BLINK_BRAKE = {name: \"Blink Brake\", objType:OBJ_EQUIP, type:EQUIP_TYPE_BRAKE, brakeSpeedPct:0, \n                            cost: {titanium:50, gold:50, uranium:30}};\nexport const EQUIP_SPEED_BOOST = {name: \"Speed Booster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_SPEED, boostSpeed:0.05, \n                            cost: {titanium:0, gold:10, uranium:20}};\nexport const EQUIP_TURN_BOOST = {name: \"Turn Booster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_TURN, boostSpeed:0.05, \n                            cost: {titanium:0, gold:10, uranium:20}};\nexport const EQUIP_STORAGE = {name: \"Storage\", objType:OBJ_EQUIP, type:EQUIP_TYPE_STORAGE, storageAmount:100, \n                            cost: {titanium:50, gold:0, uranium:0}};\nexport const EQUIP_BLASTER = {name: \"Blaster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_PRIMARY_WEAPON, coolTime:25, cool:0, damage:10, speed:2.5, lifetime:100, bulletFile:BULLET_FILE,\n                            cost: {titanium:10, gold:0, uranium:20}};\nexport const EQUIP_FAST_BLASTER = {name: \"Fast Blaster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_PRIMARY_WEAPON, coolTime:10, cool:0, damage:10, speed:4, lifetime:80, bulletFile:BULLET_FILE,\n                            cost: {titanium:20, gold:20, uranium:40}};\nexport const EQUIP_SPRINKLER_BLASTER = {name: \"Sprinkler Blaster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_PRIMARY_WEAPON, coolTime:2, cool:2, damage:6, speed:2.5, lifetime:150, jitter:1, bulletFile:BULLET_FILE,\n  cost: {titanium:20, gold:10, uranium:80}};\nexport const EQUIP_STREAM_BLASTER = {name: \"Stream Blaster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_PRIMARY_WEAPON, coolTime:3, cool:0, damage:7, speed:7, lifetime:70, bulletFile:BULLET_FILE,\n                            cost: {titanium:30, gold:30, uranium:60}};\nexport const EQUIP_THRUSTER = {name: \"Thruster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_THRUSTER, thrustSpeed:0.08, thrustType:THRUST_MOMENTUM,\n                            cost: {titanium:40, gold:40, uranium:10}};\n// blink thrustSpeed is good from 2 to 10                            \nexport const EQUIP_BLINK_THRUSTER = {name: \"Blink Thruster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_THRUSTER, thrustSpeed:2.5, thrustType:THRUST_BLINK,\n                            cost: {titanium:60, gold:50, uranium:10}};\nexport const EQUIP_R2D2 = {name: \"R2D2 Repair Droid\", objType:OBJ_EQUIP, type:EQUIP_TYPE_REPAIR_DROID, repairSpeed:0.03, \n                            cost: {titanium:20, gold:100, uranium:50}};\nexport const EQUIP_GUNNERY_DROID = {name: \"Gunnery Droid\", objType:OBJ_EQUIP, type:EQUIP_TYPE_GUNNERY_DROID,\n  weapon:EQUIP_FAST_BLASTER, cost: {titanium:100, gold:200, uranium:300}};\nexport const EQUIP_ALIEN_BLASTER = {name: \"Alien Blaster\", objType:OBJ_EQUIP, type:EQUIP_TYPE_PRIMARY_WEAPON, coolTime:20, cool:0, damage:4, speed:2, lifetime:120, bulletFile:BULLET_BLUE_FILE,\n                            cost: {titanium:10, gold:30, uranium:50}};\nexport const EQUIP_STAPLE_GUN = {name: \"Staple Gun\", objType:OBJ_EQUIP, type:EQUIP_TYPE_PRIMARY_WEAPON, coolTime:3, cool:0, damage:1.5, speed:3, lifetime:300, bulletFile:BULLET_STAPLE_FILE,\n  cost: {titanium:10, gold:30, uranium:50}};\nexport const EQUIP_ARMOR = {name: \"Armor Plate\", objType:OBJ_EQUIP, type:EQUIP_TYPE_ARMOR, armorAmt:100,\n                            cost: {titanium:50, gold:0, uranium:0}};\nexport const EQUIP_SHIELD = {name: \"Force Shield\", objType:OBJ_EQUIP, type:EQUIP_TYPE_SECONDARY_WEAPON, cool: 0, coolTime: 600,\n  shield: {active:false, armor: 500, armorMax:500, lifetime:240, lifetimeMax:240, spriteFile: SHIELD_BLUE_FILE, radius:0},\n  cost: {titanium:0, gold:0, uranium:100}};\n\n// Ships\nexport const SHIP_EXPLORER = {\n  name: \"Explorer\",\n  objType:OBJ_SHIP,\n  propulsion: 0.05, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 50,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 2,\n  equip : [EQUIP_BRAKE, EQUIP_BLASTER], // DEBUG blaster\n  armorMax: 50,\n  armor: 50,\n  crashSpeed: 2,\n  crashAngle: 0.5,\n  imageScale: 0.6,\n  imageFile: SHIP_EXPLORER_FILE,\n  cost: {titanium:40, gold:30, uranium:30},\n};\n\nexport const SHIP_CARGO = {\n  name: \"Cargo\",\n  objType:OBJ_SHIP,\n  propulsion: 0.027, // best between 0.02 - 0.1\n  turnSpeed: 0.04, // // best between 0.3 - 0.07\n  resourcesMax: 600,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 2,\n  equip : [EQUIP_BRAKE],\n  armorMax: 20,\n  armor: 20,\n  crashSpeed: 1.2,\n  crashAngle: 0.3,\n  imageScale: 1,\n  imageFile: SHIP_CARGO_FILE,\n  cost: {titanium:100, gold:50, uranium:50},\n};\n\nexport const SHIP_FAST = {\n  name: \"Fast\",\n  objType:OBJ_SHIP,\n  propulsion: 0.1, // best between 0.02 - 0.1\n  turnSpeed: 0.08, // // best between 0.3 - 0.07\n  resourcesMax: 40,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 3,\n  equip : [EQUIP_BRAKE],\n  armorMax : 50,\n  armor: 50,\n  crashSpeed: 2,\n  crashAngle: 0.5,\n  imageScale: 1,\n  imageFile: SHIP_FAST_FILE,\n  cost: {titanium:200, gold:100, uranium:50},\n};\n\n\nexport const SHIP_SKELETON = {\n  name: \"Skeleton\",\n  objType:OBJ_SHIP,\n  propulsion: 0.03, // best between 0.02 - 0.1\n  turnSpeed: 0.045, // // best between 0.3 - 0.07\n  resourcesMax: 30,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 7,\n  equip : [],\n  armorMax : 50,\n  armor: 50,\n  crashSpeed: 2,\n  crashAngle: 0.5,\n  imageScale: 0.8,\n  imageFile: SHIP_SKELETON_FILE,\n  cost: {titanium:150, gold:150, uranium:50},\n};\n\nexport const SHIP_HEAVY = {\n  name: \"Heavy\",\n  objType:OBJ_SHIP,\n  propulsion: 0.05, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 300,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 6,\n  equip : [EQUIP_BRAKE],\n  armorMax : 300,\n  armor: 300,\n  crashSpeed: 1.5,\n  crashAngle: 0.4,\n  imageScale: 0.4,\n  imageFile: SHIP_HEAVY_FILE,\n  cost: {titanium:500, gold:300, uranium:150},\n};\n\nexport const SHIP_FIGHTER = {\n  name: \"Fighter\",\n  objType:OBJ_SHIP,\n  propulsion: 0.08, // best between 0.02 - 0.1\n  turnSpeed: 0.07, // // best between 0.3 - 0.07\n  resourcesMax: 120,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 6,\n  equip : [EQUIP_BRAKE],\n  armorMax : 200,\n  armor: 200,\n  crashSpeed: 1.5,\n  crashAngle: 0.6,\n  imageScale: 0.5,\n  imageFile: SHIP_FIGHTER_FILE,\n  cost: {titanium:500, gold:500, uranium:500},\n};\n\nexport const SHIP_ALIEN_TURRET = {\n  name: \"Alien Turret\",\n  objType:OBJ_SHIP,\n  propulsion: 0.05, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 100,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 3,\n  equip : [EQUIP_BRAKE, EQUIP_ALIEN_BLASTER],\n  armorMax: 100,\n  armor: 100,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 0.8,\n  imageFile: ALIEN_SHIP_SMALL_FILE,\n  cost: {titanium:50, gold:50, uranium:50},\n  aiType: ALIEN_AI_TURRET,\n};\n\nexport const SHIP_ALIEN = {\n  name: \"Alien Ship\",\n  objType:OBJ_SHIP,\n  propulsion: 0.05, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 100,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 3,\n  equip : [EQUIP_BRAKE, EQUIP_ALIEN_BLASTER],\n  armorMax: 100,\n  armor: 100,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 0.9,\n  imageFile: ALIEN_SHIP_FILE,\n  cost: {titanium:150, gold:100, uranium:80},\n  aiType: ALIEN_AI_CREEPER,\n};\n\nexport const SHIP_ALIEN_LARGE = {\n  name: \"Alien Large\",\n  objType:OBJ_SHIP,\n  propulsion: 0.03, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 100,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 3,\n  equip : [EQUIP_BRAKE, EQUIP_ALIEN_BLASTER],\n  armorMax: 300,\n  armor: 300,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 1,\n  imageFile: ALIEN_SHIP_LARGE_FILE,\n  cost: {titanium:150, gold:100, uranium:80},\n  aiType: ALIEN_AI_CREEPER,\n};\n\nexport const SHIP_ALIEN_FIRE = {\n  name: \"Alien Fire\",\n  objType:OBJ_SHIP,\n  propulsion: 0.08, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 100,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 3,\n  equip : [EQUIP_BRAKE, EQUIP_STAPLE_GUN],\n  armorMax: 250,\n  armor: 250,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 1.5,\n  imageFile: ALIEN_SHIP_FIRE_FILE,\n  cost: {titanium:250, gold:200, uranium:80},\n  aiType: ALIEN_AI_CREEPER,\n};\n\nexport const SHIP_ALIEN_STEALTH = {\n  name: \"Alien Stealth\",\n  objType:OBJ_SHIP,\n  propulsion: 0.04, // best between 0.02 - 0.1\n  turnSpeed: 0.05, // // best between 0.3 - 0.07\n  resourcesMax: 100,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 3,\n  equip : [EQUIP_BRAKE, EQUIP_ALIEN_BLASTER],\n  armorMax: 150,\n  armor: 150,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 1.5,\n  imageFile: ALIEN_SHIP_BLACK_FILE,\n  cost: {titanium:100, gold:200, uranium:150},\n  aiType: ALIEN_AI_CREEPER,\n};\n\nexport const SHIP_MINE = {\n  name: \"Mine\",\n  objType:OBJ_SHIP,\n  propulsion: 0.0,\n  turnSpeed: 0.0,\n  resourcesMax: 0,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 0,\n  equip : [],\n  armorMax: 100,\n  armor: 100,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 1.2,\n  imageFile: ALIEN_SHIP_BLUE_FILE,\n  cost: {titanium:5, gold:0, uranium:10},\n  aiType: EQUIP_AI_MINE,\n  aiData: {mineDistance: 300}\n};\n\nexport const SHIP_TURRET = {\n  name: \"Turret\",\n  objType:OBJ_SHIP,\n  propulsion: 0.0,\n  turnSpeed: 0.0,\n  resourcesMax: 0,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 0,\n  equip : [EQUIP_FAST_BLASTER],\n  armorMax: 100,\n  armor: 100,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 0.6,\n  imageFile: ALIEN_SHIP_LARGE_BLUE_FILE,\n  cost: {titanium:10, gold:10, uranium:20},\n  aiType: EQUIP_AI_TURRET,\n  aiData: {mineDistance: 300}\n};\n\nexport const SHIP_MISSILE = {\n  name: \"Missile\",\n  objType:OBJ_SHIP,\n  propulsion: 0.1, // best between 0.02 - 0.1\n  turnSpeed: 0.1, // // best between 0.3 - 0.07\n  resourcesMax: 0,\n  resources: {\n    titanium : 0,\n    gold : 0,\n    uranium : 0,\n  },\n  equipMax: 0,\n  equip : [],\n  armorMax: 200,\n  armor: 200,\n  crashSpeed: 2,\n  crashAngle: 10,\n  imageScale: 1,\n  imageFile: SHIP_BALL_FILE,\n  cost: {titanium:5, gold:5, uranium:10},\n  aiType: EQUIP_AI_MISSILE,\n};\n\nexport const ALL_SHIPS = [SHIP_EXPLORER, SHIP_CARGO, SHIP_FAST, SHIP_HEAVY, SHIP_FIGHTER,\n  SHIP_ALIEN,  SHIP_ALIEN_TURRET, SHIP_ALIEN_LARGE, SHIP_ALIEN_FIRE, SHIP_ALIEN_STEALTH];\n\n// This equipment needs to go after the ships (ugh)\nexport const EQUIP_MINE_DEPLOYER = {name: \"Mine Deployer\", objType:OBJ_EQUIP, type:EQUIP_TYPE_SECONDARY_WEAPON, coolTime:25, cool:0,\n  createShip: {type: SHIP_MINE, dir: DIR_BEHIND_SHIP },\n  cost: {titanium:30, gold:50, uranium:100}};\nexport const EQUIP_TURRET_DEPLOYER = {name: \"Turret Deployer\", objType:OBJ_EQUIP, type:EQUIP_TYPE_SECONDARY_WEAPON, coolTime:100, cool:0,\n  createShip: {type:SHIP_TURRET, dir: DIR_BEHIND_SHIP},\n  cost: {titanium:100, gold:100, uranium:200}};\nexport const EQUIP_MISSILE_LAUNCHER = {name: \"Missile Launcher\", objType:OBJ_EQUIP, type:EQUIP_TYPE_SECONDARY_WEAPON, coolTime:50, cool:0,\n  createShip: {type: SHIP_MISSILE, dir: DIR_AHEAD_OF_SHIP},\n  cost: {titanium:50, gold:50, uranium:100}};\n\nexport const EQUIP_BRAKES = [EQUIP_BRAKE, EQUIP_BLINK_BRAKE];\nexport const EQUIP_THRUSTERS = [EQUIP_THRUSTER, EQUIP_BLINK_THRUSTER];\nexport const EQUIP_UPGRADES = [EQUIP_ARMOR, EQUIP_SPEED_BOOST, EQUIP_TURN_BOOST, EQUIP_STORAGE ];\nexport const EQUIP_PRIMARY_WEAPONS = [EQUIP_BLASTER, EQUIP_FAST_BLASTER, EQUIP_STREAM_BLASTER, EQUIP_SPRINKLER_BLASTER, EQUIP_ALIEN_BLASTER, EQUIP_STAPLE_GUN];\nexport const EQUIP_SECONDARY_WEAPONS = [EQUIP_MINE_DEPLOYER, EQUIP_TURRET_DEPLOYER, EQUIP_MISSILE_LAUNCHER, EQUIP_SHIELD];\nexport const EQUIP_MISC = [EQUIP_R2D2, EQUIP_GUNNERY_DROID];\nexport const ALL_EQUIP = [...EQUIP_BRAKES, ...EQUIP_THRUSTERS, ...EQUIP_UPGRADES, ...EQUIP_PRIMARY_WEAPONS, ...EQUIP_SECONDARY_WEAPONS, ...EQUIP_MISC];\n\nexport const XP_LEVELS = {\n  // Mining resources\n  [ROCK_PLANET_FILE] : [\n    {xp:1, obj:SHIP_EXPLORER},\n    {xp:50, obj:EQUIP_BRAKE},\n    {xp:80, obj:EQUIP_BLASTER},\n    {xp:100, obj:SHIP_CARGO},\n    {xp:200, obj:EQUIP_ARMOR},\n    {xp:500, obj:EQUIP_SPEED_BOOST},\n  ],\n  [RED_PLANET_FILE] : [\n    {xp:10, obj:EQUIP_STORAGE},\n    {xp:50, obj:EQUIP_THRUSTER},\n    {xp:100, obj:SHIP_FAST},\n  ],\n  [GREEN_PLANET_FILE] : [\n    {xp:10, obj:SHIP_SKELETON},\n    {xp:50, obj:EQUIP_R2D2},\n    {xp:100, obj:EQUIP_BLINK_THRUSTER},\n    {xp:1000, obj:SHIP_HEAVY},\n  ],\n  [PURPLE_PLANET_FILE] : [\n    {xp:10, obj:EQUIP_TURN_BOOST},\n    {xp:500, obj:EQUIP_GUNNERY_DROID},\n    {xp:1000, obj:SHIP_FIGHTER}\n  ],\n  // Killing aliens\n  [SHIP_ALIEN_TURRET.name] : [\n    {xp:1, obj:EQUIP_FAST_BLASTER},\n    {xp:5, obj:EQUIP_BLINK_BRAKE},\n    {xp:10, obj:EQUIP_ALIEN_BLASTER},\n  ],\n  [SHIP_ALIEN.name] : [\n    {xp:1, obj:EQUIP_MINE_DEPLOYER},\n    {xp:5, obj:EQUIP_STREAM_BLASTER},\n    {xp:10, obj:SHIP_ALIEN},\n  ],\n  [SHIP_ALIEN_LARGE.name] : [\n    {xp:1, obj:EQUIP_SHIELD},\n    {xp:5, obj:EQUIP_TURRET_DEPLOYER},\n    {xp:10, obj:SHIP_ALIEN_LARGE},\n  ],\n  [SHIP_ALIEN_STEALTH.name] : [\n    {xp:1, obj:EQUIP_SPRINKLER_BLASTER},\n    {xp:5, obj:EQUIP_MISSILE_LAUNCHER},\n  ],\n  [SHIP_ALIEN_FIRE.name] : [\n    {xp:1, obj:EQUIP_STAPLE_GUN},\n    {xp:10, obj:SHIP_ALIEN_FIRE},\n  ],\n}\n\nexport const PLANET_DENSITY = new Map();\nPLANET_DENSITY.set(GREEN_PLANET_FILE, 0.01)\nPLANET_DENSITY.set(PURPLE_PLANET_FILE, 0.015)\nPLANET_DENSITY.set(RED_PLANET_FILE, 0.02)\nPLANET_DENSITY.set(ROCK_PLANET_FILE, 0.025)\n\n// Universe Rings\nexport const UNIVERSE_RINGS = [\n  { planetCount: 1,\n    minDist: 1, maxDist: 2,\n    minDistToOtherPlanet:10,\n    minPlanetRadius:1500, maxPlanetRadius:1501,\n    planetFiles:[PURPLE_PLANET_FILE],\n    aliens: [{count: 0, file: null}],\n  },\n  { planetCount: 0,\n    minDist: 1600, maxDist: 2500,\n    minDistToOtherPlanet:200,\n    minPlanetRadius:200, maxPlanetRadius:200,\n    planetFiles:[],\n    aliens: [{count: 50, file: SHIP_ALIEN_STEALTH}, {count: 50, file: SHIP_ALIEN_FIRE}, ],\n  },\n  { planetCount: 200,\n    minDist: 2500, maxDist: 10000,\n    minDistToOtherPlanet:150,\n    minPlanetRadius:250, maxPlanetRadius:500,\n    planetFiles:[RED_PLANET_FILE, PURPLE_PLANET_FILE, GREEN_PLANET_FILE],\n    aliens: [{count: 200, file: SHIP_ALIEN_TURRET}, {count: 200, file: SHIP_ALIEN}, {count: 700, file: SHIP_ALIEN_LARGE}, {count: 300, file: SHIP_ALIEN_STEALTH}, ],\n  },\n  { planetCount: 600,\n    minDist: 10000, maxDist: 15000,\n    minDistToOtherPlanet:150,\n    minPlanetRadius:150, maxPlanetRadius:250,\n    planetFiles:[ROCK_PLANET_FILE, RED_PLANET_FILE, GREEN_PLANET_FILE],\n    aliens: [{count: 1000, file: SHIP_ALIEN_TURRET}, {count: 1000, file: SHIP_ALIEN}, {count: 300, file: SHIP_ALIEN_LARGE},],\n  },\n  { planetCount: 1800,\n    minDist: 15000, maxDist: 25000,\n    minDistToOtherPlanet:200,\n    minPlanetRadius:100, maxPlanetRadius:200,\n    planetFiles:[ROCK_PLANET_FILE, RED_PLANET_FILE],\n    aliens: [{count: 1500, file: SHIP_ALIEN_TURRET}, {count: 100, file: SHIP_ALIEN}],\n  },\n  { planetCount: 1000,\n    minDist: 25000, maxDist: UNIVERSE_RADIUS,\n    minDistToOtherPlanet:500,\n    minPlanetRadius:30, maxPlanetRadius:100,\n    planetFiles:[ROCK_PLANET_FILE],\n    aliens: [],\n  },\n];\n","import { c, utils, fly, manage } from './';\nimport lodash from 'lodash';\n\n/**\n * Creates an empty world object, with only basic properties. \n * This will be populated by setupWorld()\n */\nexport function createEmptyWorld() {\n  return {\n    saveGameName: null, // name of last game saved/loaded\n    ship:null,\n    view: { // global XY for current view (in manage mode, always ship.xy in fly mode)\n      x:0,\n      y:0,\n    },\n    aliens:[],\n    planets:[],\n    selectedPlanet: {resources:{}},\n    lastPlanetLanded: null,\n    blueprints: {\n      ship:[],\n      equip:[],\n      xp: { [c.ROCK_PLANET_FILE]: 0, [c.RED_PLANET_FILE]: 0, [c.GREEN_PLANET_FILE]: 0, [c.PURPLE_PLANET_FILE]: 0,\n           [c.SHIP_ALIEN_TURRET.name]: 0, [c.SHIP_ALIEN.name]: 0, [c.SHIP_ALIEN_LARGE.name]: 0, [c.SHIP_ALIEN_STEALTH.name]: 0, [c.SHIP_ALIEN_FIRE.name]: 0},\n      xpLevels: lodash.cloneDeep(c.XP_LEVELS),\n    },\n    nextId: 100, // unique ID for sprites, equip, etc...\n    // everything in system is transient and not serialized when saving the game\n    system: {\n      keys: {}, // Global keypress handlers\n      app: null, // Pixi App\n      gameState: c.GAME_STATE.INIT, // Current game state\n      isTyping: false, // used to stop keypress events ('w') when user is typing in input\n      gameLoop: null, // loop function in this state\n      bgSprite: null, // star background\n      explosionSheet: null, // spritesheet for explosions\n      explosions : [], //contains sprites\n      bullets: [], // contains all the bullets\n      planetSpriteCache: {}, // {\"green_planet.png\" : Map(id:sprite, id:sprite)... }\n      shipSpriteCache: {}, // {\"alien_small.png\" : Map(id:sprite, id:sprite)... }\n      shieldSpriteCache: new Map(), // These sprites are each added to a ship and not reused\n      spriteContainers: {background:null, planets:null, bullets:null, ships:null, minimap:null},\n      miniMapGraphics: null, // used as a canvas for drawing the miniMap\n      initializing: true, // set to false when the game fully running (after first draw)\n    },\n  };\n}\n\nexport function setupWorld() {\n  const world = window.world;\n  setupSpriteContainers();\n  createBackground();\n  createPlanets();\n  // Default selectedPlanet, shouldn't be displayed\n  world.selectedPlanet = world.planets[0];\n  window.world.shipStartX = c.PLAYER_START_X;\n  //window.world.shipStartX = +1550;\n  window.world.shipStartY = c.PLAYER_START_Y;\n  world.ship = createShip(c.SHIP_EXPLORER, c.PLAYER);\n  //world.ship = createShip(c.SHIP_HEAVY, c.PLAYER);\n  const shipSprite = getShipSprite(world.ship);\n  shipSprite.visible = true;\n  world.ship.resources = c.PLAYER_STARTING_RESOURCES;\n\n  // DEBUG SHIP\n  // world.ship.armorMax = 1000;\n  // world.ship.armor = 1000;\n  // world.ship.resources = {titanium:10000, gold:10000, uranium:10000 };\n  // world.ship.resourcesMax = 10000000;\n  // NOTE: This equip doesn't have ids, so they don't always work\n  //world.ship.equip = [c.EQUIP_BLINK_BRAKE, c.EQUIP_BLINK_THRUSTER, lodash.cloneDeep(c.EQUIP_SHIELD), lodash.cloneDeep(c.EQUIP_STREAM_BLASTER)];\n  //world.ship.equipMax = world.ship.equip.length;\n  //world.blueprints.equip = [...c.ALL_EQUIP];\n  //world.blueprints.ship = [...c.ALL_SHIPS];\n\n  // DEBUG test alien\n  // createAlien(c.SHIP_ALIEN_TURRET, c.PLAYER_START_X + 450, c.PLAYER_START_Y+70);\n  // createAlien(c.SHIP_ALIEN_LARGE, c.PLAYER_START_X + 450, c.PLAYER_START_Y-70);\n\n  // DEBUG Planet\n  // let testPlanet = createPlanet(c.GREEN_PLANET_FILE, \"home\", 100, 200, {\n  //   titanium : 20500,\n  //   gold : 51000,\n  //   uranium : 5000,\n  // });\n  // testPlanet.x = c.PLAYER_START_X - 150;\n  // testPlanet.y = c.PLAYER_START_Y ;\n  // testPlanet.resources.stored = {titanium:10000, gold:10000, uranium:10000};\n\n  createAliens();\n  setupMiniMap();\n  setupExplosionSheet();\n  setupPlanetCache();\n}\n\n/**\n * Sets up the sprite containers in the correct display order\n */\nexport function setupSpriteContainers() {\n  let mainStage = window.world.system.app.stage;\n  let spriteContainers = window.world.system.spriteContainers;\n  spriteContainers.background = new window.PIXI.Container();\n  mainStage.addChild(spriteContainers.background);\n\n  spriteContainers.planets = new window.PIXI.Container();\n  mainStage.addChild(spriteContainers.planets);\n\n  spriteContainers.bullets = new window.PIXI.Container();\n  mainStage.addChild(spriteContainers.bullets);\n\n  spriteContainers.ships = new window.PIXI.Container();\n  mainStage.addChild(spriteContainers.ships);\n\n  spriteContainers.minimap = new window.PIXI.Container();\n  mainStage.addChild(spriteContainers.minimap);\n}\n\nexport function createBackground() {\n  let container = window.world.system.spriteContainers.background;\n  window.world.system.bgSprite = new window.PIXI.TilingSprite(\n    window.PIXI.Texture.from(c.STAR_BACKGROUND_FILE),\n    c.SCREEN_WIDTH,\n    c.SCREEN_HEIGHT,\n  );\n  container.addChild(window.world.system.bgSprite);\n}\n\nexport function createPlanets() {\n  let container = window.world.system.spriteContainers.planets;\n  for (let ring of c.UNIVERSE_RINGS) {\n    for (let i=0; i<ring.planetCount; i++) {\n      let fileName = ring.planetFiles[utils.randomInt(0, ring.planetFiles.length-1)];\n      let name = String.fromCharCode(65+Math.floor(Math.random() * 26)) + utils.randomInt(1000,999999);\n      let radius = utils.randomInt(ring.minPlanetRadius, ring.maxPlanetRadius);\n      let mass = radius * radius * c.PLANET_DENSITY.get(fileName);\n      let maxResource = mass * 2 * 0.3;\n      let minResource = mass * 0.1;\n      // Setup the planet\n      let planet = createPlanet(fileName, name, radius, mass, {\n        titanium : utils.randomInt(minResource, maxResource),\n        gold : utils.randomInt(minResource, maxResource),\n        uranium : utils.randomInt(minResource, maxResource),\n      }, container);\n      let {x,y} = getFreeXy(planet, ring.minDistToOtherPlanet, 0, ring.minDist, ring.maxDist);\n      planet.x = x;\n      planet.y = y;\n    }\n  }\n}\n\n/**\n * Distance to the nearest planet that is not equal to origPlanet\n * @return {nearestAlien, nearestPlanetDist}\n */\nfunction nearestPlanetDistance(origPlanet, x, y) {\n  let minDist = 99999999999; \n  let nearestPlanet = null;\n  for (let planet of window.world.planets) {\n    if (planet !== origPlanet) {\n      let dist = utils.distanceBetween(x,y, planet.x,planet.y) - planet.radius;\n      if (origPlanet) {\n        dist -= origPlanet.radius;\n      }\n      if (!nearestPlanet || (dist < minDist)) {\n        minDist = dist;\n        nearestPlanet = planet;\n      }\n    }\n  } // for planet\n  return {nearestPlanet:nearestPlanet, nearestPlanetDist:minDist};\n}\n\n/**\n * Distance to the nearest alien\n * @return {nearestAlien, nearestAlienDist}\n */\nfunction nearestAlienDistance(x, y) {\n  let minDist = 99999999999; \n  let nearestAlien = null;\n  for (let alien of window.world.aliens) {\n    // This assumes the calling code alien is the same size\n    let dist = utils.distanceBetween(x,y, alien.x, alien.y) - (alien.radius * 2);\n    if (!nearestAlien || (dist < minDist)) {\n      minDist = dist;\n      nearestAlien = alien;\n    }\n  } // for\n  return {nearestAlien:nearestAlien, nearestAlienDist:minDist};\n}\n\n/**\n * Find a free spot of space to stick something\n * This will recurse until it finds a free spot.\n * @return {x,y}\n */\nfunction getFreeXy(planet, minDistToPlanet, minDistToAlien, minDist, maxDist, failCount=0) {\n  let dir = utils.randomFloat(0, Math.PI*2);\n  let dist = utils.randomInt(minDist, maxDist);\n  let {x,y} = utils.getPointFrom(0,0, dir, dist);\n  let np = 9999;\n  if (minDistToPlanet > 0) {\n    let {nearestPlanetDist} = nearestPlanetDistance(planet, x,y);\n    if (nearestPlanetDist < minDistToPlanet) {\n      return getFreeXy(planet, minDistToPlanet, minDistToAlien, minDist, maxDist, ++failCount);\n    }\n    np = nearestPlanetDist;\n  }\n  if (minDistToAlien > 0) {\n    let {nearestAlienDist} = nearestAlienDistance(x,y);\n    if (nearestAlienDist < minDistToAlien) {\n      return getFreeXy(planet, minDistToPlanet, minDistToAlien, minDist, maxDist, ++failCount);\n    }\n  }\n  if (failCount > 200) {\n    console.warn(\"Had a hard time finding a spot, it took \"+failCount+\" tries on ring \"+minDist+\" np=\"+np);\n  }\n  return {x,y};\n}\n\n// Creates and returns a planet (and adds it to the app)\nexport function createPlanet(planetFile, name, radius, mass, resources) {\n  let planet = {};\n  planet.name = name; \n  planet.x = 0; // temp should get reset\n  planet.y = 0; // temp should get reset\n  planet.mass = mass;\n  planet.resources = {\n    stored: {titanium:0, gold:0, uranium:0},\n    raw: resources\n  };\n  planet.ships = []; // stored ships \n  planet.equip = []; // stored equipment\n  planet.buildings = []; // mines, factories\n  planet.radius = radius;\n  planet.lastLandingDir = 0;\n  planet.spriteFile = planetFile;\n  planet.spriteId = null; // no sprite created yet\n  window.world.planets.push(planet);\n  return planet;\n}\n\n/**\n * Finds or creates a planet sprite.\n * This cache works a little different, no sprites are re-used.\n * Once a planetSprite is created the buildings are added and it stays attached to the planet\n * Otherwise we would have to empty out the container and redraw the planet and buildings each time\n */\nexport function getPlanetSprite(planet) {\n  let planetSpriteCache = window.world.system.planetSpriteCache[planet.spriteFile];\n  // No cache for this file yet - create an empty cache\n  if (!planetSpriteCache) {\n    planetSpriteCache= new Map();\n    window.world.system.planetSpriteCache[planet.spriteFile] = planetSpriteCache;\n  }\n  // Lookup the sprite in the cache by ID\n  let planetContainer = planetSpriteCache.get(planet.spriteId);\n  if (planetContainer) {\n    return planetContainer;\n  }\n  // Setup the planet container sprite (contains planet plus buildings)\n  planetContainer = new window.PIXI.Container();\n  planetContainer.x = 0; // will be set on every draw\n  planetContainer.y = 0;\n  planetContainer.visible = true;\n  window.world.system.spriteContainers.planets.addChild(planetContainer);\n\n  // Setup the planet sprite itself\n  const planetSprite = new window.PIXI.Sprite(\n    window.PIXI.loader.resources[c.SPRITESHEET_JSON].textures[planet.spriteFile]);\n  planetSprite.anchor.set(0.5, 0.5);\n  let spriteScale = planet.radius * 2 / planetSprite.width;\n  // Planets with atmosphere are a little smaller than the full image size\n  if ((planet.spriteFile === c.PURPLE_PLANET_FILE) || (planet.spriteFile === c.GREEN_PLANET_FILE)) {\n    spriteScale = spriteScale * 1.08;\n  }\n  planetSprite.scale.set(spriteScale, spriteScale);\n  planetContainer.addChild(planetSprite);\n\n  for (const building of planet.buildings) {\n    manage.makeBuildingSprite(building, planet, planetContainer);\n  }\n\n  // Cache the new sprite\n  planet.spriteId = window.world.nextId++;\n  planetSpriteCache.set(planet.spriteId, planetContainer);\n  return planetContainer;\n}\n\n/**\n * Finds or creates a sprite for the ship\n * NOTE: This will return a non-visible sprite, the calling code is responsible for making the sprite visible\n */\nexport function getShipSprite(ship) {\n  // if (!ship.alive) {\n  //   console.warn('You should not get sprites for dead ships.');\n  //   console.trace();\n  //   window.error(); // does not exist... thus an error!\n  //   return;\n  // }\n  let shipSpriteCache = window.world.system.shipSpriteCache[ship.imageFile];\n  // No cache for this file yet - create an empty cache\n  if (!shipSpriteCache) {\n    shipSpriteCache= new Map();\n    window.world.system.shipSpriteCache[ship.imageFile] = shipSpriteCache;\n  }\n  // Lookup the sprite in the cache by ID\n  let sprite = shipSpriteCache.get(ship.spriteId);\n  if (sprite) {\n    return sprite;\n  }\n  // Lookup a free sprite (dead or off-screen alien)\n  for (let [spriteId, foundSprite] of shipSpriteCache.entries()) {\n    if (!foundSprite.visible) {\n      foundSprite.visible = false;\n      foundSprite.rotation = ship.rotation;\n      ship.spriteWidth = foundSprite.width;\n      ship.spriteHeight = foundSprite.height;\n      ship.radius = foundSprite.width/2; // used for circular aliens\n      ship.spriteId = spriteId;\n      //console.log('found old sprite '+spriteId+' '+ship.imageFile);\n      return foundSprite;\n    }\n  } // foundSprite\n\n  // No sprite found - create a new one\n  let spriteSheet = window.PIXI.loader.resources[c.SPRITESHEET_JSON];\n  sprite = new window.PIXI.Sprite(spriteSheet.textures[ship.imageFile]);\n  sprite.position.set(c.HALF_SCREEN_WIDTH, c.HALF_SCREEN_HEIGHT);\n  sprite.anchor.set(0.5, 0.5);  // pivot on ship center\n  sprite.scale.set(ship.imageScale, ship.imageScale);\n  sprite.rotation = ship.rotation;\n  sprite.visible = false;\n  ship.spriteWidth = sprite.width;\n  ship.spriteHeight = sprite.height;\n  ship.radius = sprite.width/2; // used for circular aliens\n  ship.spriteId = window.world.nextId++;\n  shipSpriteCache.set(ship.spriteId, sprite);\n  window.world.system.spriteContainers.ships.addChild(sprite);\n  //console.log('created new ship sprite '+ship.imageFile, sprite);\n  return sprite;\n}\n\n/**\n * @return The original width/height of the sprite before scaling was applied\n *   {width, height}\n */\nexport function getSpriteOrigWithHeight(sprite) {\n  const origWidth = sprite.width;\n  const origHeight = sprite.height;\n  sprite.scale.set(1,1);\n  const width = sprite.width;\n  const height = sprite.height;\n  sprite.width = origWidth;\n  sprite.height = origHeight;\n  return {width, height};\n}\n\nexport function getShieldSprite(ship, shield) {\n  const cacheId = ship.id+'~'+shield.spriteFile;\n  // Lookup the sprite in the cache by ID\n  let shieldSprite = window.world.system.shieldSpriteCache.get(cacheId);\n  if (shieldSprite) {\n    return shieldSprite;\n  }\n  // Add a new shield image to the ship\n  const shipSprite = getShipSprite(ship);\n  let spriteSheet = window.PIXI.loader.resources[c.SPRITESHEET_JSON];\n  shieldSprite = new window.PIXI.Sprite(spriteSheet.textures[shield.spriteFile]);\n  shieldSprite.anchor.set(0.5, 0.5);  // pivot on center\n  const {width, height} = getSpriteOrigWithHeight(shipSprite);\n  // Radius within the scaled ship sprite\n  const shieldWidth = Math.max(width, height) * 1.5; // 1.5 to make it larger than the ship\n  shieldSprite.width = shieldWidth;\n  shieldSprite.height = shieldWidth;\n  shield.radius = (shieldWidth * ship.imageScale) / 2; // size without ship scaling\n  shipSprite.addChild(shieldSprite);\n  window.world.system.shieldSpriteCache.set(cacheId, shieldSprite);\n  return shieldSprite;\n}\n\n// Creates and returns a ship object\nexport function createShip(shipType, owner) {\n  let ship = lodash.cloneDeep(shipType);\n  ship.id = window.world.nextId++;\n  for (let equip of ship.equip) {\n    equip.id = window.world.nextId++;\n  }\n  ship.owner = owner;\n  ship.vx = 0; // velocityX\n  ship.vy = 0; // velocityY\n  ship.x = window.world.shipStartX;\n  ship.y = window.world.shipStartY;\n  ship.spriteId = null; // no sprite yet\n  ship.alive = true; // set to false if it blows up\n  ship.spriteWidth = null; //We won't know until we load the sprite\n  ship.rotation = 0;\n  return ship;\n}\n\nexport function createAlien(shipType, x, y) {\n  let alien = createShip(shipType, c.ALIEN);\n  window.world.aliens.push(alien);\n  alien.x = x;\n  alien.y = y;\n  alien.radius = 50; // will be set to a real value when sprite loads\n  return alien;\n}\n\nexport function createAliens() {\n  for (let ring of c.UNIVERSE_RINGS) {\n    for (const alienInfo of ring.aliens) {\n      for (let i=0; i<alienInfo.count; i++) {\n        let {x, y} = getFreeXy(null, c.MIN_ALIEN_DIST_TO_PLANET, c.MIN_ALIEN_DIST_TO_ALIEN, ring.minDist, ring.maxDist);\n        createAlien(alienInfo.file, x, y);\n      } // for i\n    } // for alienInfo\n  } // for ring\n}\n\nexport function setupMiniMap() {\n  let container = window.world.system.spriteContainers.minimap;\n  let miniMapContainer = new window.PIXI.Container();\n  container.addChild(miniMapContainer);\n\n  // Mask so drawings don't spill out of the map\n  let mask = new window.PIXI.Graphics();\n  mask.drawRect(0, c.SCREEN_HEIGHT-c.MINIMAP_HEIGHT, c.MINIMAP_WIDTH, c.SCREEN_HEIGHT);\n  mask.renderable = true;\n  mask.cacheAsBitmap = true;\n  miniMapContainer.addChild(mask);\n  miniMapContainer.mask = mask;  \n\n  // Graphics for drawing shapes on\n  let g = new window.PIXI.Graphics();\n  miniMapContainer.addChild(g);  \n  window.world.system.miniMapGraphics = g;\n}\n\n/**\n * Called when the user clicks on the screen \n */\nexport function click(event) {\n  let x = event.data.global.x;\n  let y = event.data.global.y;\n  if ((x < c.MINIMAP_WIDTH) && (y> c.SCREEN_HEIGHT-c.MINIMAP_HEIGHT)) {\n    fly.clickOnMinimap(x,y);\n  }\n}\n\nexport function changeGameState(newState) {\n  const world = window.world;\n  world.system.gameState = newState;\n  if (newState === c.GAME_STATE.FLY) {\n    fly.enterFlyState();\n    world.system.gameLoop = fly.flyLoop;\n  } else if (newState === c.GAME_STATE.MANAGE) {\n    manage.enterManageState();\n    world.system.gameLoop = manage.manageLoop;\n  } else {\n    world.system.gameLoop = null;\n  }\n}\n\n/**\n * Loop to run building, runs in any game mode (fly,manage)\n */\nexport function runBuildings() {\n  const world = window.world;\n  for (let planet of world.planets) {\n    for (let building of planet.buildings) {\n      if (building.type === c.BUILDING_TYPE_MINE) {\n        mineResource(planet, 'titanium', c.MINE_SPEED_TITANIUM);\n        mineResource(planet, 'gold', c.MINE_SPEED_GOLD);\n        mineResource(planet, 'uranium', c.MINE_SPEED_URANIUM);\n      }\n    } // for building\n    // If planet is out of resources stop the mine animations\n    if ( (planet.resources.raw.titanium === 0) \n      && (planet.resources.raw.gold === 0)\n      && (planet.resources.raw.uranium === 0)) {\n        const planetSprite = getPlanetSprite(planet);\n        for (const buildingSprite of planetSprite.children) {\n          // all animated sprites stop (this may not be true if new building types are added)\n          if (buildingSprite.animationSpeed) {\n            buildingSprite.animationSpeed = 0;\n          }\n        }\n    }\n  } // for planet\n}\n\nfunction mineResource(planet, resourceType, amount) {\n  if (planet.resources.raw[resourceType] > 0) {\n    planet.resources.raw[resourceType] -= amount;\n    planet.resources.stored[resourceType] += amount;\n    if (planet.resources.raw[resourceType] <= 0) {\n      planet.resources.raw[resourceType] = 0;\n    }\n    addMiningXp(amount, planet);\n  }\n}\n\nfunction addMiningXp(amount, planet) {\n  let blueprints = window.world.blueprints;\n  const xp = blueprints.xp[planet.spriteFile] += amount;\n  let nextLevel = blueprints.xpLevels[planet.spriteFile][0];\n  if (nextLevel && (nextLevel.xp <= xp)) {\n    addBlueprint(nextLevel);\n    // Remove the item\n    blueprints.xpLevels[planet.spriteFile].shift();\n  }\n}\n\nexport function addAlienXp(ship) {\n  let blueprints = window.world.blueprints;\n  const xp = blueprints.xp[ship.name] += 1;\n  let nextLevel = blueprints.xpLevels[ship.name][0];\n  if (nextLevel && (nextLevel.xp <= xp)) {\n    addBlueprint(nextLevel);\n    // Remove the item\n    blueprints.xpLevels[ship.name].shift();\n  }\n}\n\nexport function addBlueprint(nextLevel) {\n  utils.showToast('New plan: '+nextLevel.obj.name);\n  let blueprints = window.world.blueprints;\n  if (nextLevel.obj.objType === c.OBJ_EQUIP) {\n    blueprints.equip.push(nextLevel.obj);\n  } else if (nextLevel.obj.objType === c.OBJ_SHIP) {\n    blueprints.ship.push(nextLevel.obj);\n  } else {\n    console.warn(\"Could not find blueprint of type \"+nextLevel.obj.objType+\" nextLevel=\",nextLevel);\n  }\n}\n\n/**\n * Checks if the combined resources of planet and ship can afford the resources\n * Call this before calling payResourceCost\n * @return true if there are enough resources available\n */\nexport function canAfford(planet, ship, resources) {\n  let titanium = 0;\n  let gold = 0;\n  let uranium = 0;\n  if (planet) {\n    titanium += planet.resources.stored.titanium;\n    gold += planet.resources.stored.gold;\n    uranium += planet.resources.stored.uranium;\n  }\n  if (ship) {\n    titanium += ship.resources.titanium;\n    gold += ship.resources.gold;\n    uranium += ship.resources.uranium;\n  }\n  return (titanium >= resources.titanium)\n      && (gold >= resources.gold)\n      && (uranium >= resources.uranium);\n}\n\n/**\n * Pays the cost, taking from the planet and the ship as available\n * NOTE: This will not ensure you have enough resources, you can go into debt if you call this without checking\n * first using canAfford()\n * @param planet planet to get resources from\n * @param ship ship to get resources from\n * @param resources amount to pay\n */\nexport function payResourceCost(planet, ship, resources) {\n  payResource(planet, ship, 'titanium', resources.titanium);\n  payResource(planet, ship, 'gold', resources.gold);\n  payResource(planet, ship, 'uranium', resources.uranium);\n}\n\nexport function payResource(planet, ship, resourceType, amount) {\n  let paid = -amount; // amount owing (overwritten if some payment comes from the planet)\n  if (planet) {\n    paid = planet.resources.stored[resourceType] - amount; \n    if (paid >= 0) {\n      planet.resources.stored[resourceType] -= amount;\n      return;\n    } else {\n      // Planet can't afford this purchase, take some from the ship\n      planet.resources.stored[resourceType] = 0;\n    }\n  }\n  if (ship) { \n    ship.resources[resourceType] = ship.resources[resourceType] + paid;\n    if (ship.resources[resourceType] < 0) {\n      console.warn(\"Ship is in debt \"+ship.resources[resourceType]+\" \"+resourceType);\n    }\n  } else if (paid < 0) {\n    planet.resources.stored[resourceType] = planet.resources.stored[resourceType] + paid;\n    console.warn(\"Planet is in debt \"+planet.resources.stored[resourceType]+\" \"+resourceType);\n  }\n}\n\nexport function setupExplosionSheet() {\n  window.world.system.explosionSheet = window.PIXI.Loader.shared.resources[c.CRASH_JSON].spritesheet;\n  // Preload an explosion sprite animation (these will be cached and reused in world.system.explosions)\n  window.world.system.explosions.push(createExplosionSprite());\n}\n\nexport function createExplosionSprite() {\n  let sprite = new window.PIXI.AnimatedSprite(window.world.system.explosionSheet.animations[c.CRASH]);\n  sprite.animationSpeed = 0.4;\n  sprite.loop = false;\n  sprite.anchor.set(0.5, 0.5);\n  sprite.scale.set(2, 2);\n  sprite.x = c.HALF_SCREEN_WIDTH;\n  sprite.y = c.HALF_SCREEN_WIDTH;\n  sprite.loop = true;\n  sprite.visible = false;\n  window.world.system.explosions.push(sprite);\n  window.world.system.spriteContainers.bullets.addChild(sprite);\n  return sprite;\n}\n\n/**\n * Creates a cache for all positions in the universe and stores the nearby planets\n */\nexport function setupPlanetCache() {\n  const planetCache = new Array(c.PLANET_CACHE_NUM_STEPS);\n  // for every position in the universe\n  for (let stepX=0; stepX <c.PLANET_CACHE_NUM_STEPS; stepX++) {\n    planetCache[stepX] = new Array(c.PLANET_CACHE_NUM_STEPS);\n    for (let stepY=0; stepY<c.PLANET_CACHE_NUM_STEPS; stepY++) {\n      const minX = ((stepX - 1) * c.PLANET_CACHE_STEP_SIZE) - c.UNIVERSE_RADIUS;\n      const maxX = ((stepX + 2) * c.PLANET_CACHE_STEP_SIZE) - c.UNIVERSE_RADIUS;\n      const minY = ((stepY - 1) * c.PLANET_CACHE_STEP_SIZE) - c.UNIVERSE_RADIUS;\n      const maxY = ((stepY + 2) * c.PLANET_CACHE_STEP_SIZE) - c.UNIVERSE_RADIUS;\n      //console.log('Step ('+stepX+','+stepY+')  x:'+minX+' to '+maxX+'   y:'+minY+' to '+maxY);\n      const stepPlanets = [];\n      // Find planets within view of this location\n      for (const planet of window.world.planets) {\n        if ((planet.x  - planet.radius >= minX) && (planet.x + planet.radius <= maxX ) &&\n            (planet.y - planet.radius >= minY) && (planet.y + planet.radius <= maxY )) {\n          stepPlanets.push(planet);\n        }\n      } // for planets\n      planetCache[stepX][stepY] = { planets: stepPlanets };\n    } // for stepY\n  } // for stepX\n\n  window.world.system.planetCache = planetCache;\n}\n\n/**\n * Find planets from the planetCache that are somewhat near (within SCREEN_SIZE)\n */\nexport function getPlanetsNear(x, y) {\n  let stepX = Math.floor((x + c.UNIVERSE_RADIUS) / c.PLANET_CACHE_STEP_SIZE);\n  let stepY = Math.floor((y + c.UNIVERSE_RADIUS) / c.PLANET_CACHE_STEP_SIZE);\n  if (stepX < 0) {\n    stepX = 0;\n  }\n  if (stepX >= c.PLANET_CACHE_NUM_STEPS) {\n    stepX = c.PLANET_CACHE_NUM_STEPS - 1;\n  }\n  if (stepY < 0) {\n    stepY = 0;\n  }\n  if (stepY >= c.PLANET_CACHE_NUM_STEPS) {\n    stepY = c.PLANET_CACHE_NUM_STEPS - 1;\n  }\n  return window.world.system.planetCache[stepX][stepY].planets;\n}\n\n","import {c, fly, game, utils} from './';\nimport {getShipSprite} from \"./game\";\n\nexport function moveAliens() {\n  let ship = window.world.ship;\n  for (let alien of window.world.aliens) {\n    if (!alien.alive) {\n      continue;\n    }\n    let hasMoved = false;\n    if (alien.aiType === c.ALIEN_AI_TURRET) {\n      turretAi(alien);\n    } else if (alien.aiType === c.ALIEN_AI_CREEPER) {\n      hasMoved = creeperAi(alien);\n    } else if (alien.aiType === c.EQUIP_AI_TURRET) {\n      hasMoved = playerTurretAi(alien);\n    } else if (alien.aiType === c.EQUIP_AI_MISSILE) {\n      hasMoved = playerMissileAi(alien);\n    }\n    if (hasMoved) {\n      checkForCollisionWithPlanet(alien);\n      checkForCollisionWithShip(alien);\n    }\n\n    // If alien is in the viewport\n    if ((ship.x + c.HALF_SCREEN_WIDTH + alien.radius >= alien.x) && // Right\n      (ship.x - c.HALF_SCREEN_WIDTH - alien.radius <= alien.x) && // Left\n      (ship.y + c.HALF_SCREEN_HEIGHT + alien.radius >= alien.y) && // Bottom\n      (ship.y - c.HALF_SCREEN_HEIGHT - alien.radius <= alien.y)) { // Top\n      // alien may have died in a collision\n      if (alien.alive) {\n        // Set alien ship relative to the ship's viewport\n        const alienSprite = getShipSprite(alien);\n        alienSprite.visible = true;\n        alienSprite.rotation = alien.rotation;\n        alienSprite.x = (alien.x - ship.x) + c.HALF_SCREEN_WIDTH;\n        alienSprite.y = (alien.y - ship.y) + c.HALF_SCREEN_HEIGHT;\n      }\n    } else { // alien is not in view\n      // Release the sprite if the alien is not in the view\n      if (alien.spriteId) {\n        const alienSprite = getShipSprite(alien);\n        alienSprite.visible = false;\n        alien.spriteId = null;\n      }\n    }\n  } // for alien\n}\n\n/**\n * Fire primary weapon in the direction of x,y\n * @ship ship with gun to fire\n * @x/y  the location to aim at\n * @jitter amount (in radians) of randomness added to direction component\n *         0 - shoots directly at player\n *         PI - shoot completely randomly\n */\nexport function shootAt(shooter, x,y, jitter) {\n  shooter.rotation = utils.normalizeRadian(Math.atan2(y - shooter.y, x - shooter.x));\n  fly.firePrimaryWeapon(shooter, jitter);\n}\n\nexport function turretAi(alien) {\n  let ship = window.world.ship;\n  if (!ship.alive) {\n    return;\n  }\n  if (utils.distanceBetween(alien.x, alien.y, ship.x, ship.y) < 300) {\n    shootAt(alien, ship.x, ship.y, 0.7);\n  }\n}\n\nexport function playerTurretAi(turret) {\n  const {target, dist} = getNearestAlienTarget(turret.x, turret.y);\n  if (target && (dist <= fly.primaryWeaponRange(turret))) {\n    shootAt(turret, target.x, target.y, 0.25);\n  }\n  return false; // never moves\n}\n\nexport function playerMissileAi(missile) {\n  const {target, dist} = getNearestAlienTarget(missile.x, missile.y);\n  // Missiles don't track targets really far away\n  if (target && dist < c.SCREEN_WIDTH) {\n    let dirToTarget = utils.directionTo(missile.x, missile.y, target.x, target.y);\n    let {xAmt, yAmt} = utils.dirComponents(dirToTarget, missile.propulsion);\n    missile.vx += xAmt;\n    missile.vy += yAmt;\n    missile.x += missile.vx;\n    missile.y += missile.vy;\n    return true;\n  }\n  // Don't move if there's nobody to move towards\n  return false;\n}\n\n/**\n * AI for aliens that move toward the player and shoots\n * @return true if alien moved false otherwise\n */\nexport function creeperAi(alien) {\n  let ship = window.world.ship;\n  if (!ship.alive) {\n    return;\n  }\n  let moved = false;\n  // Close enough to player to move\n  const distanceToPlayer = utils.distanceBetween(alien.x, alien.y, ship.x, ship.y);\n  if (distanceToPlayer < c.SCREEN_WIDTH) {\n    let dirToPlayer = utils.directionTo(alien.x, alien.y, ship.x, ship.y);\n    let {xAmt, yAmt} = utils.dirComponents(dirToPlayer, 25 * alien.propulsion);\n    // Check if we are too close to a planet (need to move around the planet)\n    for (let planet of game.getPlanetsNear(alien.x, alien.y)) {\n      if (utils.distanceBetween(alien.x + xAmt, alien.y + yAmt, planet.x, planet.y) < (planet.radius + alien.radius + 10)) {\n        const dirToPlanet = utils.directionTo(alien.x, alien.y, planet.x, planet.y);\n        let dirDiff = dirToPlanet - dirToPlayer;\n        let rightLeft = (dirDiff >= 0) ? -1 : 1;\n        if (Math.abs(dirDiff) > Math.PI) {\n          rightLeft = rightLeft * -1;\n        }\n        const turnDir = dirToPlanet + (rightLeft * Math.PI / 2);\n        ({xAmt, yAmt} = utils.dirComponents(turnDir, 20 * alien.propulsion));\n      }\n    } // for planet\n    // Too close to player, don't move closer\n    if (distanceToPlayer < (ship.spriteWidth + alien.radius + 20)) {\n      xAmt = 0;\n      yAmt = 0;\n    }\n    alien.x += xAmt;\n    alien.y += yAmt;\n    alien.rotation = dirToPlayer;\n    moved = true;\n  }\n  if (utils.distanceBetween(alien.x, alien.y, ship.x, ship.y) < 300) {\n    shootAt(alien, ship.x, ship.y, 0.15);\n  }\n  return moved;\n}\n\n/**\n * Finds the nearest alien target to the x,y location\n * returns {target:X, dist:Y }  x and y will be null if no living targets are found\n */\nexport function getNearestAlienTarget(x,y) {\n  let target = null;\n  let minDist = null;\n  for (let alien of window.world.aliens) {\n    if (alien.alive && alien.owner === c.ALIEN) {\n      let dist = utils.distanceBetween(x, y, alien.x, alien.y);\n      if (!target || (dist < minDist)) {\n        target = alien;\n        minDist = dist;\n      }\n    }\n  } // for\n  return {target: target, dist: minDist};\n}\n\nexport function checkForCollisionWithPlanet(alien) {\n  for (let planet of window.world.planets) {\n    let dist = utils.distanceBetween(alien.x, alien.y, planet.x, planet.y);\n    if (dist <= (alien.radius + planet.radius)) {\n      fly.destroyShip(alien, null);\n    }\n  } // for\n}\n\nexport function checkForCollisionWithShip(ship) {\n  for (let otherShip of window.world.aliens) {\n    if (otherShip.alive && ship !== otherShip) {\n      let dist = utils.distanceBetween(ship.x, ship.y, otherShip.x, otherShip.y);\n      if (dist <= (ship.radius + otherShip.radius)) {\n        fly.shipsCollide(ship, otherShip);\n      }\n    }\n  } // for\n}","import {utils, c, game, manage, ai, fly} from './';\nimport {canAfford, getPlanetSprite, getShieldSprite, getShipSprite, payResourceCost} from \"./game\";\nimport {shootAt} from \"./ai\";\nimport {DIR_AHEAD_OF_SHIP} from \"./constants\";\n\nexport function enterFlyState() {\n  console.log(\"Take off\");\n}\n\n// Main play mode - flying\nexport function flyLoop(delta) {\n  let world = window.world;\n  let ship = window.world.ship;\n  // When ship.alive is false the ship is exploding\n  if (ship.alive) {\n    runDroids(ship);\n    // Keypress handling\n    if (world.system.keys.left.isDown || world.system.keys.a.isDown) {\n      turnShip(ship, true);\n    }\n    if (world.system.keys.right.isDown || world.system.keys.d.isDown) {\n      turnShip(ship, false);\n    }\n    if (world.system.keys.up.isDown || world.system.keys.w.isDown) {\n      propelShip(ship);\n    }\n    if (world.system.keys.down.isDown || world.system.keys.s.isDown) {\n      brakeShip(ship);\n    }\n    if (world.system.keys.space.isDown) {\n      firePrimaryWeapon(ship, 0.05);\n    }\n    if (world.system.keys.x.isDown) {\n      fireSecondaryWeapon(ship);\n    }\n    if (world.system.keys.q.isDown) {\n      thrustShip(ship, true);\n    }\n    if (world.system.keys.e.isDown) {\n      thrustShip(ship, false);\n    }\n\n    // Find planets in view\n    let planetsInView = [];\n    for (let planet of world.planets) {\n      if (planetInView(ship, planet)) {\n        planetsInView.push(planet);\n      }\n    }\n\n    // Gravity\n    for (let planet of planetsInView) {\n      let grav = utils.calcGravity(ship.x, ship.y, planet);\n      ship.vx += grav.x;\n      ship.vy += grav.y;\n    }\n\n    // move the ship\n    ship.x += ship.vx;\n    ship.y += ship.vy;\n    world.view.x = ship.x;\n    world.view.y = ship.y;\n\n    let shipSprite = getShipSprite(ship);\n    shipSprite.rotation = ship.rotation;\n\n    // Don't detect collisions until all the drawing is done\n    // Pixijs sometimes gets the sprite locations wrong when they haven't been rendered yet\n    if (!world.system.initializing) {\n      // Ship-Planet Collisions\n      for (let planet of planetsInView) {\n        if (detectCollisionWithPlanet(ship, shipSprite, planet)) {\n          landShip(ship, planet);\n          return; // exit loop\n        }\n      } // for planet\n      // Ship-Alien collision\n      for (let alien of world.aliens) {\n        if (alien.alive && detectCollisionWithAlien(ship, shipSprite, alien)) {\n          shipsCollide(ship, alien);\n        }\n      }\n    }\n  }\n\n  moveExplosions(); // especially alien explosions\n  moveBackground(ship);\n  drawMiniMap();\n  // first draw is done\n  if (world.system.initializing) {\n    world.system.initializing = false;\n  }\n}\n\n/**\n * Recalculates all the locations of planets and aliens\n */\nexport function repositionScreen() {\n  // Reposition all the planets\n  for (let planet of window.world.planets) {\n    planetInView(window.world.ship, planet);\n  }\n  // Reposition all the aliens\n  ai.moveAliens();\n  drawMiniMap();\n}\n\n/**\n * Cools all ship weapons, run in mainLoop \n */\nexport function coolAllWeapons() {\n  coolWeapons(window.world.ship);\n  for (let alien of window.world.aliens) {\n    coolWeapons(alien);\n  }\n}\n\n/**\n * called in flyLoop to cool weapons\n */\nexport function coolWeapons(ship) {\n  for (let equip of ship.equip) {\n    // If equip has a cool time\n    if (equip.cool) {\n      equip.cool -= 1;\n    }\n    // Gunnery Droids are equip with weapons\n    if (equip.weapon && equip.weapon.cool) {\n      equip.weapon.cool -= 1;\n    }\n    if (equip.shield && equip.shield.active) {\n      equip.shield.lifetime  -= 1;\n      if (equip.shield.lifetime <= 0) {\n        equip.shield.lifetime = 0;\n        disableShield(ship, equip.shield);\n      }\n    }\n  }\n}\n\nexport function resetWeaponsCool(ship) {\n  for (let equip of ship.equip) {\n    if ((equip.type === c.EQUIP_TYPE_PRIMARY_WEAPON) && (equip.cool > 0)) {\n      equip.cool = 0;\n    }\n  }\n}\n\nexport function runDroids(ship) {\n  for (let droid of ship.equip) {\n    if ((droid.type === c.EQUIP_TYPE_REPAIR_DROID) && (ship.armor < ship.armorMax)) {\n      let cost = {titanium:droid.repairSpeed, gold:0, uranium:0};\n      if (game.canAfford(null, ship, cost)) {\n        ship.armor += droid.repairSpeed;\n        game.payResourceCost(null, ship, cost);\n      }\n    } else if (droid.type === c.EQUIP_TYPE_GUNNERY_DROID) {\n      shootAtNearestAlien(ship, droid.weapon);\n    }\n  } // for\n}\n\n/**\n * Fires the weapon in the direction of the nearest alien (if able to )\n */\nexport function shootAtNearestAlien(ship, weapon) {\n  // If we can't shoot, don't waste our time\n  if (weapon.cool > 0) {\n    return;\n  }\n  let nearestAlien = null;\n  let nearestAlienDist = null;\n  for (let alien of window.world.aliens) {\n    if (alien.alive && alien.owner === c.ALIEN) {\n      let dist = utils.distanceBetween(ship.x, ship.y, alien.x, alien.y);\n      if (!nearestAlien || (dist < nearestAlienDist)) {\n        nearestAlien = alien;\n        nearestAlienDist = dist;\n      }\n    }\n  } // for\n  if (nearestAlien && (nearestAlienDist <= weaponRange(weapon))) {\n    const origDir = ship.rotation;\n    ship.rotation = utils.normalizeRadian(Math.atan2(nearestAlien.y - ship.y, nearestAlien.x - ship.x));\n    fireWeapon(weapon, ship, 0.1);\n    ship.rotation = origDir;\n  }\n}\n\nexport function moveBackground(ship) {\n  let bgSprite = window.world.system.bgSprite;\n  bgSprite.tilePosition.x = (100 - ship.x) + c.HALF_SCREEN_WIDTH;\n  bgSprite.tilePosition.y = (100 - ship.y) + c.HALF_SCREEN_HEIGHT;\n}\n\n/**\n * @return true if the planet is in view of the ship, false otherwise\n * NOTE: This will set the sprite.visible and sprite x/y attributes for the planet\n */\nexport function planetInView(ship, planet) {\n  // Right side\n  if ((ship.x + c.HALF_SCREEN_WIDTH + planet.radius < planet.x) || // Right\n      (ship.x - c.HALF_SCREEN_WIDTH - planet.radius > planet.x) || // Left\n      (ship.y + c.HALF_SCREEN_HEIGHT + planet.radius < planet.y) || // Bottom\n      (ship.y - c.HALF_SCREEN_HEIGHT - planet.radius > planet.y)) { // Top\n    // Planet is not currently visible, but if it has an Id then it used to be visible\n    if (planet.spriteId) {\n      const sprite = getPlanetSprite(planet);\n      if (sprite.visible) {\n        sprite.visible = false;\n      }\n    }\n    return false;\n  }\n  // Here we know this planet is in view\n  const sprite = getPlanetSprite(planet);\n  sprite.visible = true;\n  // Set planet relative to the ship's viewport\n  sprite.x = (planet.x - ship.x) + c.HALF_SCREEN_WIDTH;\n  sprite.y = (planet.y - ship.y) + c.HALF_SCREEN_HEIGHT;\n  return true;\n}\n\n/**\n * @return the first active shield the ship is equipped with\n */\nexport function getActiveShield(ship) {\n  for (const equip of ship.equip) {\n    if (equip.shield && equip.shield.active) {\n      return equip.shield;\n    }\n  }\n  return null;\n}\n\n// Returns true if there is a collision and false otherwise\nexport function detectCollisionWithPlanet(ship, shipSprite, planet) {\n  const shield = getActiveShield(ship);\n  if (shield) {\n    // shield collision is round\n    return utils.distanceBetween(ship.x, ship.y, planet.x, planet.y) < (planet.radius + shield.radius);\n  }\n  // [[x,y],[x,y]]\n  let collisionPoints = utils.getVertexData(ship.x, ship.y, shipSprite);\n  for (let point of collisionPoints) {\n    let dist = utils.distanceBetween(point[0], point[1], planet.x, planet.y);\n    if (dist < planet.radius - c.ALLOWED_OVERLAP) {\n      return true;\n    } \n  }\n  return false;\n}\n\n// Returns true if there is a collision and false otherwise\nexport function detectCollisionWithAlien(ship, shipSprite, alien) {\n  const shield = getActiveShield(ship);\n  if (shield) {\n    // shield collision is round\n    return utils.distanceBetween(ship.x, ship.y, alien.x, alien.y) < (alien.radius + shield.radius);\n  }\n  let collisionPoints = utils.getVertexData(ship.x, ship.y, shipSprite);\n  for (let point of collisionPoints) {\n    // Only works with circular aliens (need different logic for squares)\n    if (alien.radius) {\n      let dist = utils.distanceBetween(point[0], point[1], alien.x, alien.y);\n      if (dist < alien.radius - c.ALLOWED_OVERLAP) { \n        return true;\n      } \n    }\n  }\n  return false;\n}\n\n/**\n * Land the ship on the planet\n * NOTE: This will cause damage to the ship attempting to land (side-effects)\n */\nfunction landShip(ship, planet) {\n  // atan2 has parameters (y,x)\n  let planetDir = utils.normalizeRadian(Math.atan2(ship.y - planet.y, ship.x - planet.x));\n  let dirDiff = Math.abs(ship.rotation - planetDir);\n  let speed = Math.abs(ship.vx) + Math.abs(ship.vy);\n  // 0 and PI*2 are right beside each other, so large values are very close to small values\n  let success = ((dirDiff < ship.crashAngle) || (dirDiff > (Math.PI * 2 - ship.crashAngle)))\n                && (speed < ship.crashSpeed)\n  // Stop moving\n  ship.vx = 0;\n  ship.vy = 0;\n  if (!success) {\n    // The landing was rough - do damage\n    let speedDiff = Math.max(speed - ship.crashSpeed, 0); // 0 if negative\n    let dirDiffAdj = Math.max(dirDiff - ship.crashAngle, 0); // 0 if negative\n    if (dirDiffAdj > Math.PI) {\n      dirDiffAdj = (Math.PI * 2) - dirDiff - ship.crashAngle;\n    }\n    let dmgPct = (speedDiff / 3) + dirDiffAdj;\n    let dmg = dmgPct * ship.armorMax;\n    damageShip(ship, dmg, resetGame);\n  }\n  // Disable shields when landing\n  const shield = getActiveShield(ship);\n  if (shield) {\n    disableShield(ship, shield);\n  }\n  // If the ship survived the landing\n  if (ship.armor > 0) {\n    window.world.selectedPlanet = planet; // currently selected planet (for manage UI)\n    window.world.lastPlanetLanded = planet; // last planet landed on\n    //Set ship position and angle on the planet surface\n    let dir = utils.directionTo(planet.x, planet.y, ship.x, ship.y)\n    let r = planet.radius + ship.spriteWidth / 2;\n    let {xAmt, yAmt} = utils.dirComponents(dir, r);\n    ship.x = planet.x + xAmt;\n    ship.y = planet.y + yAmt;\n    ship.rotation = dir;\n    planet.lastLandingDir = dir;\n    getShipSprite(ship).rotation = dir;\n    repositionScreen();\n    game.changeGameState(c.GAME_STATE.MANAGE);\n  }\n}\n\nexport function getExplosionSprite(ship) {\n  let sprite = null;\n  for (let explosionSprite of window.world.system.explosions) {\n    if (!explosionSprite.visible) {\n      sprite = explosionSprite;\n      break;\n    }\n  }\n  if (!sprite) {\n    sprite = game.createExplosionSprite();\n  }\n  let playerShip = window.world.ship;\n  sprite.visible = true;\n  sprite.globalX = ship.x;\n  sprite.globalY = ship.y;\n  sprite.x = (ship.x - playerShip.x) + c.HALF_SCREEN_WIDTH;\n  sprite.y = (ship.y - playerShip.y) + c.HALF_SCREEN_HEIGHT;\n  return sprite\n}\n\n/**\n * Destroys the ship playing an explosion animation\n * @param ship: the one to explode\n * @param afterExplosion: function to run after exploding (or null if nothing to do)\n */\nexport function destroyShip(ship, afterExplosion) {\n  if (ship.owner === c.ALIEN) {\n    game.addAlienXp(ship);\n  }\n  let explosionSprite = getExplosionSprite(ship);\n  const shipSprite = getShipSprite(ship);\n  shipSprite.visible = false;\n  ship.alive = false;\n  ship.spriteId = null;\n  explosionSprite.play();\n  // This function runs after the animation finishes a loop\n  explosionSprite.onLoop= () => {\n    explosionSprite.stop(); // pause until we crash again\n    explosionSprite.visible = false;\n    if (afterExplosion) {\n      afterExplosion();\n    }\n  };\n}\n\nfunction resetGame() {\n  // loadNewShip will setup a new ship but not position it\n  let ship = window.world.ship;\n  let planet = window.world.selectedPlanet;\n  // The current ship is gone\n  ship.resourcesMax = 0;\n  ship.resources = {titanium : 0,gold : 0,uranium : 0};\n  ship.equip = [];\n  ship.armorMax = 0;\n  ship.armor = 0;\n\n  // If the most recently used planet doesn't have any buildings\n  if (!planet || (planet.buildings.length === 0)) {\n    // find a planet with a mine\n    for (let planet of window.world.planets) {\n      if (planet.buildings.length > 0) {\n        window.world.selectedPlanet = planet;\n        break;\n      }\n    }\n    // No buildings on any planet- game over! \n    if (!planet) {\n      window.world.selectedPlanet = window.world.planets[0];\n    }\n  }\n  let {x,y,rotation} = manage.getAvailablePlanetXY(planet, ship, planet.lastLandingDir, 20, 0);\n  ship.x = x;\n  ship.y = y;\n  ship.vx = 0;\n  ship.vy = 0;\n  ship.rotation = rotation;\n  flyLoop(0); // redraw the screen once\n  game.changeGameState(c.GAME_STATE.MANAGE);\n}\n\n/**\n * Explosion position update on screen as ship moves\n * This is called in the fly loop\n */\nfunction moveExplosions() {\n  let ship = window.world.ship;\n  for (let sprite of window.world.system.explosions) {\n    sprite.x = (sprite.globalX - ship.x) + c.HALF_SCREEN_WIDTH;\n    sprite.y = (sprite.globalY - ship.y) + c.HALF_SCREEN_HEIGHT;\n  }\n}\n\nfunction turnShip(ship, left) {\n  let turnSpeed = ship.turnSpeed;\n  let turnBooster = getEquip(ship, c.EQUIP_TYPE_TURN);\n  if (turnBooster) {\n    turnSpeed += turnBooster.boostSpeed;\n  }\n  ship.rotation = utils.normalizeRadian(ship.rotation + turnSpeed * (left ? -1 : 1));\n}\n\nfunction propelShip(ship) {\n  let propulsion = ship.propulsion;\n  let booster = getEquip(ship, c.EQUIP_TYPE_TURN);\n  if (booster) {\n    propulsion += booster.boostSpeed;\n  }\n  ship.vx += propulsion * Math.cos(ship.rotation);\n  ship.vy += propulsion * Math.sin(ship.rotation);\n}\n\nfunction brakeShip(ship) {\n  let brake = getEquip(ship, c.EQUIP_TYPE_BRAKE);\n  if (brake) {\n    if (brake.brakeSpeedPct > 0) {\n      ship.vx -= ship.vx * brake.brakeSpeedPct;\n      ship.vy -= ship.vy * brake.brakeSpeedPct;\n    } else {\n      // Blink brake pct is 0, immediate stop (no momentum)\n      ship.vx = 0;\n      ship.vy = 0;\n    }\n  }\n}\n\nfunction thrustShip(ship, left) {\n  let thruster = getEquip(ship, c.EQUIP_TYPE_THRUSTER);\n  if (thruster) {\n    let dir =utils.normalizeRadian(ship.rotation + ((left ? -1 : 1) * Math.PI/2)); // 90 deg turn\n    const thrustX = thruster.thrustSpeed * Math.cos(dir);\n    const thrustY = thruster.thrustSpeed * Math.sin(dir);\n    if (thruster.thrustType === c.THRUST_MOMENTUM) {\n      ship.vx += thrustX;\n      ship.vy += thrustY\n    } else if (thruster.thrustType === c.THRUST_BLINK) {\n      ship.x += thrustX;\n      ship.y += thrustY;\n    } else {\n      console.warn(\"Unable to use thruster with type \"+thruster.thrustType);\n    }\n  }\n}\n\n/**\n * Fires the weapon from the location and direction of the ship\n */\nexport function fireWeapon(weapon, ship, jitter) {\n  if (weapon && (weapon.cool <= 0)) {\n    fireBullet(ship, weapon, jitter);\n    weapon.cool = weapon.coolTime; // this is decremented in coolWeapons\n  }\n}\n\nexport function firePrimaryWeapon(ship, jitter) {\n  let gun = getEquip(ship, c.EQUIP_TYPE_PRIMARY_WEAPON);\n  if (gun) {\n    fireWeapon(gun, ship, gun.jitter ? gun.jitter : jitter);\n  }\n}\n\nexport function fireSecondaryWeapon(ship) {\n  let weapon = getEquip(ship, c.EQUIP_TYPE_SECONDARY_WEAPON);\n  if (weapon && (weapon.cool <= 0)) {\n    if (weapon.createShip && game.canAfford(null, ship, weapon.createShip.type.cost)) {\n      game.payResourceCost(null, ship, weapon.createShip.type.cost);\n      const mine = game.createShip(weapon.createShip.type, c.PLAYER);\n      const mineSprite = getShipSprite(mine);\n      const mineDistFromShip = ship.spriteWidth/2 + mine.spriteWidth/2 + 20;\n      const dir = weapon.createShip.dir === DIR_AHEAD_OF_SHIP ? utils.normalizeRadian(ship.rotation - Math.PI) : ship.rotation;\n      const {xAmt, yAmt} = utils.dirComponents(dir, mineDistFromShip);\n      mine.x = ship.x - xAmt;\n      mine.y = ship.y - yAmt;\n      if (mine.propulsion) {\n        mine.vx = ship.vx;\n        mine.vy = ship.vy;\n      }\n      mine.rotation = utils.normalizeRadian(dir - Math.PI);\n      mineSprite.visible = true;\n      mineSprite.x = (mine.x - ship.x) + c.HALF_SCREEN_WIDTH;\n      mineSprite.y = (mine.y - ship.y) + c.HALF_SCREEN_HEIGHT;\n      window.world.aliens.push(mine);\n      // Since it never moves we only need one check to see if it collides with anything\n      ai.checkForCollisionWithPlanet(mine);\n      ai.checkForCollisionWithShip(mine);\n    }\n    if (weapon.shield) {\n      enableShield(ship, weapon.shield);\n    }\n    weapon.cool = weapon.coolTime; // this is decremented in coolWeapons\n  }\n}\n\n/**\n * Called to enable a ship's shield.\n * This will add a shield sprite to the ship and set it to visible\n */\nexport function enableShield(ship, shield) {\n  const shieldSprite = game.getShieldSprite(ship, shield);\n  shieldSprite.visible = true;\n  shield.active = true;\n  shield.lifetime = shield.lifetimeMax;\n  shield.armor = shield.armorMax;\n  // Increase the ship size to the size of the shield\n  ship.spriteWidth = shield.radius * 2;\n  ship.spriteHeight = shield.radius * 2;\n}\n\n/**\n * Called to disable, and stop drawing a shield on a ship\n */\nexport function disableShield(ship, shield) {\n  const shieldSprite = game.getShieldSprite(ship, shield);\n  shieldSprite.visible = false;\n  shield.active = false;\n  // Reset the ship size back to regular\n  const shipSprite = getShipSprite(ship);\n  ship.spriteWidth = shipSprite.width;\n  ship.spriteHeight = shipSprite.height;\n}\n\n/**\n * Fires a bullet from the ship\n */\nexport function fireBullet(ship, gun, jitter) {\n  let bullet = findOrCreateBullet(gun.bulletFile);\n  bullet.lifetime = gun.lifetime;\n  bullet.damage = gun.damage;\n  const jitterAmt = jitter ? (jitter * Math.random() * (utils.randomBool() ? -1 : 1)) : 0;\n  const rotation = ship.rotation + jitterAmt;\n  bullet.vx = ship.vx + gun.speed * Math.cos(rotation);\n  bullet.vy = ship.vy + gun.speed * Math.sin(rotation);\n  bullet.x = ship.x + Math.sqrt(ship.spriteWidth*ship.spriteWidth + ship.spriteHeight*ship.spriteHeight)/2 * Math.cos(rotation);\n  bullet.y = ship.y + Math.sqrt(ship.spriteWidth*ship.spriteWidth + ship.spriteHeight*ship.spriteHeight)/2 * Math.sin(rotation);\n}\n\n/**\n * Gets the next available bullet (one that is not visible)\n */\nfunction findOrCreateBullet(bulletFile) {\n  for (let bullet of window.world.system.bullets) {\n    if (!bullet.active && (bullet.fileName === bulletFile)) {\n      bullet.active = true;\n      bullet.sprite.visible = true;\n      return bullet;\n    }\n  }\n  // Create a new bullet\n  let bullet = {active:true, damage:0, x:0, y:0, vx:0, vy:0, lifetime:1, fileName:bulletFile};\n  // Setup sprite\n  let spritesheet = window.PIXI.loader.resources[c.SPRITESHEET_JSON];\n  let sprite = new window.PIXI.Sprite(spritesheet.textures[bulletFile]);\n  sprite.x = -100;\n  sprite.y = -100;\n  sprite.anchor.set(0.5, 0.5);\n  sprite.scale.set(0.5, 0.5);\n  window.world.system.spriteContainers.bullets.addChild(sprite);\n  bullet.sprite = sprite;\n  window.world.system.bullets.push(bullet);\n  return bullet;\n}\n\nfunction killBullet(bullet) {\n  bullet.active = false;\n  bullet.sprite.visible = false;\n  bullet.sprite.x = -100;\n  bullet.sprite.y = -100;\n  bullet.vx = 0;\n  bullet.vy = 0;\n}\n\n/**\n * Moves all the bullets (called every draw cycle from app.js mainLoop)\n */\nexport function moveBullets() {\n  let ship = window.world.ship;\n  for (let bullet of window.world.system.bullets) {\n    if (bullet.active) {\n      bullet.x = bullet.x + bullet.vx;\n      bullet.y = bullet.y + bullet.vy;\n      bullet.sprite.x = (bullet.x - ship.x) + c.HALF_SCREEN_WIDTH;\n      bullet.sprite.y = (bullet.y - ship.y) + c.HALF_SCREEN_HEIGHT;\n      bullet.lifetime =  bullet.lifetime - 1;\n      if (bullet.lifetime <= 0) {\n        killBullet(bullet);\n      }\n      checkForBulletCollision(bullet);\n    }\n  } // for bullet\n}\n\nfunction checkForBulletCollision(bullet) {\n  let ship = window.world.ship;\n  // Collision with planet\n  for (let planet of window.world.planets) {\n    if (utils.distanceBetween(planet.x, planet.y, bullet.x, bullet.y) < planet.radius) {\n      // TODO: Check for building damage\n      killBullet(bullet);\n    }\n  }\n  // Collision with ship\n  if (ship.alive) {\n    const shield = getActiveShield(ship);\n    if (shield && utils.distanceBetween(ship.x, ship.y, bullet.x, bullet.y) < shield.radius) {\n      bulletHitShip(bullet, ship, resetGame);\n    } else {\n      const shipSprite = getShipSprite(ship);\n      if (shipSprite.containsPoint({x:bullet.sprite.x, y:bullet.sprite.y})) {\n        bulletHitShip(bullet, ship, resetGame);\n      }\n    }\n  } \n  // Collision with alien ship\n  for (let alien of window.world.aliens) {\n    if (alien.alive && alien.radius) {\n      const shield = getActiveShield(alien);\n      if ((shield && utils.distanceBetween(alien.x, alien.y, bullet.x, bullet.y) < shield.radius) || // hit alien shield\n          (utils.distanceBetween(alien.x, alien.y, bullet.x, bullet.y) <= alien.radius)) { // hit alien ship\n        bulletHitShip(bullet, alien, null);\n      }\n    }\n  } // for alien\n}\n\n/**\n * Apply damage from bullet to ship, also kills the bullet\n */\nfunction bulletHitShip(bullet, ship, afterExplosion) {\n  damageShip(ship, bullet.damage, afterExplosion);\n  killBullet(bullet);\n}\n\n/**\n * applies damage to the ship, destroying the ship if needed\n */\nexport function damageShip(ship, damage, afterExplosion) {\n  const shield = getActiveShield(ship);\n  if (shield) {\n    shield.armor -= damage;\n    if (shield.armor <= 0) {\n      shield.armor = 0;\n      disableShield(ship, shield);\n    }\n  } else { // no shield\n    ship.armor = ship.armor - damage;\n    if (ship.armor <= 0) {\n      ship.armor = 0;\n      destroyShip(ship, afterExplosion);\n    }\n  }\n}\n\n/**\n * collision between player ship and alien (sometimes alien and alien)\n */\nexport function shipsCollide(ship, alien) {\n  let shipDamage = ship.armor;\n  let alienDamage = alien.armor;\n  damageShip(alien, shipDamage, null);\n  damageShip(ship, alienDamage, (window.world.ship === ship) ? resetGame : null);\n  // If you died hitting an alien, stop moving\n  if (!ship.alive) {\n    ship.vx = 0;\n    ship.vy = 0;\n  }\n}\n\n/**\n * @return matching acc equipment type if it is found, null otherwise\n */\nexport function getEquip(ship, equipType) {\n  for (let equip of ship.equip) {\n    if (equip.type === equipType) {\n      return equip;\n    }\n  }\n  return null;\n}\n\nexport function drawMiniMap() {\n  let g = window.world.system.miniMapGraphics;\n  let view = window.world.view;\n  let l = 0;\n  let t = c.SCREEN_HEIGHT - c.MINIMAP_HEIGHT;\n  let r = c.MINIMAP_WIDTH;\n  let b = c.SCREEN_HEIGHT;\n  g.clear();\n  // Background\n  g.beginFill(c.MINIMAP_BACKGROUND_COLOR);\n  g.lineStyle(1, c.MINIMAP_BORDER_COLOR);\n  g.drawRect(l, t, r, b);\n  g.endFill();\n  // Planets\n  for (let planet of window.world.planets) {\n    if (planetOnMap(view, planet)) {\n      let x = l + c.HALF_MINIMAP_WIDTH + ((planet.x - view.x) * c.MINIMAP_SCALE_X);\n      let y = t + c.HALF_MINIMAP_HEIGHT + ((planet.y - view.y) * c.MINIMAP_SCALE_Y);\n      const planetColor = window.world.selectedPlanet === planet ? c.MINIMAP_SELECTED_PLANET_COLOR : c.MINIMAP_PLANET_COLOR;\n      g.lineStyle(2, planetColor);\n      g.drawCircle(x,y, planet.radius * c.MINIMAP_SCALE_X);\n      // Buildings\n      for (let building of planet.buildings) {\n        let buildingX = l + c.HALF_MINIMAP_WIDTH + ((building.x - view.x) * c.MINIMAP_SCALE_X) -1.5;\n        let buildingY = t + c.HALF_MINIMAP_HEIGHT + ((building.y - view.y) * c.MINIMAP_SCALE_Y) -1.5;\n        g.lineStyle(1, c.MINIMAP_BUILDING_COLOR);\n        g.drawRect(buildingX,buildingY,2,2);\n      }\n    }\n  }\n  // Ship\n  g.lineStyle(1, c.MINIMAP_SHIP_COLOR);\n  const x = l + c.HALF_MINIMAP_WIDTH + ((window.world.ship.x - view.x) * c.MINIMAP_SCALE_X);\n  const y = t + c.HALF_MINIMAP_HEIGHT + ((window.world.ship.y - view.y) * c.MINIMAP_SCALE_Y);\n  g.drawCircle(x,y, 2);\n}\n\n/**\n * Handles clicks on the minimap \n */\nexport function clickOnMinimap(clickX, clickY) {\n  if (window.world.system.gameState === c.GAME_STATE.MANAGE) {\n    const view = window.world.view\n    let globalX = view.x + ((clickX - c.HALF_MINIMAP_WIDTH) * (1/c.MINIMAP_SCALE_X));\n    let globalY = view.y + (((clickY - (c.SCREEN_HEIGHT - c.MINIMAP_HEIGHT)) - c.HALF_MINIMAP_HEIGHT) * (1/c.MINIMAP_SCALE_X));\n    for (let planet of window.world.planets) {\n      if (utils.distanceBetween(globalX, globalY, planet.x, planet.y) <= planet.radius) {\n        window.world.selectedPlanet = planet;\n      }\n    }\n    view.x = globalX;\n    view.y =  globalY;\n    drawMiniMap();\n  }\n}\n\n\nfunction planetOnMap(view, planet) {\n  // Right side\n  if ((view.x + c.HALF_MINIMAP_VIEW_WIDTH + planet.radius < planet.x) || // Right\n      (view.x - c.HALF_MINIMAP_VIEW_WIDTH - planet.radius > planet.x) || // Left\n      (view.y + c.HALF_MINIMAP_VIEW_HEIGHT + planet.radius < planet.y) || // Bottom\n      (view.y - c.HALF_MINIMAP_VIEW_HEIGHT - planet.radius > planet.y)) { // Top\n    return false;\n  }\n  return true;\n}\n/**\n * @return the max range of the weapon\n */\nexport function weaponRange(weapon) {\n  if (!weapon) {\n    return 0;\n  }\n  // Not sure what the fudge factor is, but the range seems a little short without it\n  return weapon.speed * weapon.lifetime * 1.4;\n}\n\n/**\n * @return the max range of the primary weapon on the ship\n */\nexport function primaryWeaponRange(ship) {\n  let gun = getEquip(ship, c.EQUIP_TYPE_PRIMARY_WEAPON);\n  return weaponRange(gun);\n}","import { c, utils, fly, game } from './';\nimport lodash from 'lodash';\nimport {EQUIP_TYPE_BRAKE, EQUIP_TYPE_PRIMARY_WEAPON, EQUIP_TYPE_THRUSTER} from \"./constants\";\n\nexport function enterManageState() {\n  console.log(\"enter manage state\");\n}\n\n// When managing planet resources - loop runs 60/s\nexport function manageLoop(delta) {\n  if ((window.world.system.keys.up.isDown || window.world.system.keys.w.isDown)) {\n    if (window.world.ship.alive && !window.world.system.isTyping) {\n      takeOff();\n    }\n  }\n}\n\nfunction takeOff() {\n  let world = window.world;\n  let ship = world.ship;\n  game.changeGameState(c.GAME_STATE.FLY);\n  let gravity = utils.calcGravity(ship.x, ship.y, world.selectedPlanet);\n  ship.vx = gravity.x * -c.TAKEOFF_SPEED;\n  ship.vy = gravity.y * -c.TAKEOFF_SPEED;\n}\n\n/**\n * @return Correct set of constants for the building type.\n * Maybe these constants could be moved into a variable or something\n */\nfunction getBuildingInfo(buildingType) {\n  if (buildingType === c.BUILDING_TYPE_FACTORY) {\n    return {spriteScale:c.FACTORY_SCALE, spriteFile:c.FACTORY_FILE, animation:false};\n  } else if (buildingType === c.BUILDING_TYPE_MINE) {\n    return {spriteScale:c.MINE_SCALE, spriteFile:c.MINE_FILE, animation:true};\n  }\n  console.warn('Unknown building type ', buildingType);\n  return {}\n}\n\n/**\n * Creates a factory sprite and adds it to the planet container using the factory x,y and rotation\n * NOTE: The building x,y,rot need to be set before calling this\n * @param building building to build\n * @param planet planet to build on\n * @param planetSprite optional, if null this will lookup the sprite using getPlanetSprite()\n */\nexport function makeBuildingSprite(building, planet, planetSprite = null) {\n  const { spriteScale, spriteFile, animation } = getBuildingInfo(building.type);\n  let spritesheet = window.PIXI.Loader.shared.resources[c.SPRITESHEET_JSON].spritesheet;\n  let buildingSprite;\n  if (animation) {\n    buildingSprite = new window.PIXI.AnimatedSprite(spritesheet.animations[spriteFile]);\n    buildingSprite.animationSpeed = c.MINE_ANIMATION_SPEED;\n    buildingSprite.play();\n  } else {\n    buildingSprite = new window.PIXI.Sprite(spritesheet.textures[spriteFile]);\n  }\n  buildingSprite.anchor.set(0.5, 0.5);\n  buildingSprite.scale.set(spriteScale, spriteScale);\n  buildingSprite.rotation = building.rotation;\n  buildingSprite.x = (building.x - planet.x);\n  buildingSprite.y = (building.y - planet.y);\n  buildingSprite.visible = true;\n  if (!planetSprite) {\n    planetSprite = game.getPlanetSprite(planet);\n  }\n  planetSprite.addChild(buildingSprite);\n}\n\nexport function buildMine() {\n  let world = window.world;\n  let mine = {type: c.BUILDING_TYPE_MINE};\n  let planet = world.selectedPlanet;\n  let ship = world.ship;\n  // Place the mine (to the right of the ship)\n  const initRotation = getBuildingPlacementRotation(ship, planet, c.MINE_WIDTH);\n  // Calculate an X,Y point near the ship on surface of the planet\n  // NOTE: we use sprite.height for width because all sprites face to the right (0 rotation)\n  let {x,y,rotation} = getAvailablePlanetXY(planet, ship, initRotation, c.MINE_WIDTH, 0);\n  if (x === null) {\n    console.warn(\"Unable to place mine\");\n    return;\n  }\n  mine.width = c.MINE_WIDTH;\n  mine.x = x;\n  mine.y = y;\n  mine.rotation = rotation;\n  // Setup the graphics\n  makeBuildingSprite(mine, planet);\n  game.payResourceCost(planet, ship, c.MINE_COST);\n  planet.buildings.push(mine);\n  fly.drawMiniMap(); // add building to minimap\n}\n\n/**\n * @return the rotation direction of a place some distance to the right of the ship\n */\nexport function getBuildingPlacementRotation(ship, planet, distanceFromShip) {\n  let deg = ship.rotation + Math.PI/2; // 90 deg (right of the ship)\n  let degX = ship.x + distanceFromShip  * Math.cos(deg); // Some point Xpx to the right of the ship\n  let degY = ship.y + distanceFromShip * Math.sin(deg);\n  // Calculate the rotation direction to get to that point\n  return utils.normalizeRadian(Math.atan2(degY - planet.y, degX - planet.x));\n\n}\n\n/**\n * @return {x,y} for the next free space to the right of the ship on the planet circumfrence \n */\nexport function getAvailablePlanetXY(planet, ship, rotation, buildingWidth, count) {\n  if (buildingFits(planet, ship, rotation, buildingWidth)) {\n    let x = planet.x + ((planet.radius + 10) * Math.cos(rotation));\n    let y = planet.y + ((planet.radius + 10) * Math.sin(rotation));\n    return {x,y, rotation};\n  }\n  // If we have done a full circle then give up\n  if (count > (Math.PI*2 / c.BUILDING_PLACEMENT_ROTATION_INCREMENT)) {\n    return {x:null, y:null, rotation:null};\n  }\n  return getAvailablePlanetXY(planet, ship, rotation+c.BUILDING_PLACEMENT_ROTATION_INCREMENT\n    , buildingWidth, ++count);\n}\n\nexport function buildingFits(planet, ship, rotation, buildingWidth) {\n  let x = planet.x + ((planet.radius + 10) * Math.cos(rotation));\n  let y = planet.y + ((planet.radius + 10) * Math.sin(rotation));\n  // Min distance to building\n  let minDist = utils.distanceBetween(x,y, ship.x, ship.y);\n  let minBuildingWidth = buildingWidth;\n  for (let building of planet.buildings) {\n     let dist = utils.distanceBetween(x,y, building.x, building.y);\n     if (dist < minDist) {\n       minDist = dist;\n       minBuildingWidth = building.width;\n     }\n  } \n  return (minDist > (buildingWidth/2 + minBuildingWidth/2 + 15));\n}\n\n/**\n * Move a resource ship <-> planet \n */\nexport function transferResource(source, target, resourceType, requestedAmtStr, maxCapacity) {\n  let requestedAmt = Number(requestedAmtStr);\n  if (isNaN(requestedAmt)) {\n    requestedAmt = 0;\n  }\n  let amt = requestedAmt;\n  // requesting '' is requesting the entire source (same as requesting too much)\n  if (requestedAmtStr === '' || (source[resourceType] - requestedAmt < 0)) {\n    amt = source[resourceType];\n  }\n  // Cap to max capacity of target\n  let spaceLeft =  maxCapacity - (target.titanium + target.gold + target.uranium);\n  if (spaceLeft < amt) {\n    amt = spaceLeft;\n  }\n  \n  target[resourceType] += amt;\n  source[resourceType] -= amt;\n}\n\nexport function buildFactory() {\n  let world = window.world;\n  let planet = world.selectedPlanet;\n  let ship = world.ship;\n  let factory = {type: c.BUILDING_TYPE_FACTORY};\n\n  // Place the mine (to the right of the ship)\n  const initialRotation = getBuildingPlacementRotation(ship, planet, c.FACTORY_WIDTH);\n  // Calculate an X,Y point near the ship on surface of the planet\n  // NOTE: we use sprite.height for width because all sprites face to the right (0 rotation)\n  let {x,y,rotation} = getAvailablePlanetXY(planet, ship, initialRotation, c.FACTORY_WIDTH, 0);\n  if (x === null) {\n    console.warn(\"Unable to place factory\");\n    return;\n  }\n  factory.width = c.MINE_WIDTH;\n  factory.x = x;\n  factory.y = y;\n  factory.rotation = rotation;\n  planet.buildings.push(factory);\n\n  // Setup the graphics\n  makeBuildingSprite(factory, planet);\n\n  game.payResourceCost(planet, ship, c.FACTORY_COST);\n  fly.drawMiniMap(); // add to minimap\n}\n\n/**\n * Called when the factory finishes building a new ship \n */\nexport function buildShip(shipTemplate) {\n  let world = window.world;\n  let planet = world.selectedPlanet;\n  let newShip = game.createShip(shipTemplate);\n  planet.ships.push(newShip);\n}\n\n/**\n * Called when the user clicks to switch to a new ship \n * NOTE: the new ship should already be created and stored in a planet\n */\nexport function switchToShip(newShip) {\n  let oldShip = window.world.ship;\n  let selectedPlanet = window.world.selectedPlanet;\n  let lastPlanetLanded = window.world.lastPlanetLanded;\n  if (!removeShipFromStorage(newShip, selectedPlanet)) {\n    console.warn(\"Unable to remove ship from planet \",newShip,\" planet=\",selectedPlanet);\n    return;\n  }\n  addShipToStorage(oldShip, lastPlanetLanded);\n\n  window.world.ship = newShip;\n  // check to ensure oldShip is not destroyed\n  if (oldShip && oldShip.alive && oldShip.spriteId) {\n    fly.resetWeaponsCool(oldShip);\n    const oldShipSprite = game.getShipSprite(oldShip);\n    oldShipSprite.visible = false;\n    oldShip.spriteId = null;\n  }\n  // Get the new sprite (adds it to the container)\n  const newShipSprite = game.getShipSprite(newShip);\n  newShipSprite.visible = true;\n  newShip.rotation = selectedPlanet.lastLandingDir;\n  newShipSprite.rotation = newShip.rotation;\n\n  let r = selectedPlanet.radius + (newShip.spriteWidth / 2);\n  newShip.x = selectedPlanet.x + (r * Math.cos(newShip.rotation));\n  newShip.y = selectedPlanet.y + (r * Math.sin(newShip.rotation));\n  window.world.lastPlanetLanded = selectedPlanet;\n  fly.repositionScreen();\n}\n\n/**\n * Removes a ship from the planet, returns null if no matching ship was found\n */\nexport function removeShipFromStorage(ship, planet) {\n  let ships = planet.ships.filter((s) => s !== ship);\n  let removedShip = ships.length < planet.ships.length;\n  planet.ships = ships;\n  return removedShip;\n}\n\nexport function addShipToStorage(ship, planet) {\n  // If the ship is not visible (and armorMax is zero) it has been destroyed\n  // Some ships might be non-visible because they are not currently being used\n  if (ship.alive && ship.armorMax > 0) {\n    planet.ships.push(ship);\n  }\n}\n\n/**\n * @return true if the planet has a factory for the player\n */\nexport function hasFactory(planet) {\n  for (let building of planet.buildings) {\n    if (building.type === c.BUILDING_TYPE_FACTORY) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function buildEquip(equipTemplate) {\n  let planet = window.world.selectedPlanet;\n  let equip = lodash.cloneDeep(equipTemplate);\n  equip.id = window.world.nextId++;\n  planet.equip.push(equip);\n}\n\nexport function costToRepair(ship) {\n  return {titanium:(ship.armorMax - ship.armor), gold:0, uranium:0};\n}\n\nexport function repairShip(planet, ship) {\n  let cost = costToRepair(ship);\n  let addArmor = ship.armorMax - ship.armor; // armor needed\n  if (!game.canAfford(planet, ship, cost)) {\n    let titaniumOnHand = planet.resources.stored.titanium + ship.resources.titanium;\n    cost.titanium = titaniumOnHand;\n    addArmor = titaniumOnHand;\n  } \n  game.payResourceCost(planet, ship, cost);\n  ship.armor += addArmor;\n}\n\nexport function addEquip(ship, newEquip) {\n  if (newEquip.type === c.EQUIP_TYPE_ARMOR) {\n    // Only add armor if the ship is in full repair\n    if (ship.armor === ship.armorMax) {\n      ship.armor += newEquip.armorAmt;\n    }\n    ship.armorMax += newEquip.armorAmt;\n  } else if (newEquip.type === c.EQUIP_TYPE_STORAGE) {\n    ship.resourcesMax += newEquip.storageAmount;\n  }\n}\n\nexport function moveEquipFromPlanetToShip(ship, planet, equipToMove) {\n  // Remove from the planet\n  ship.equip.push(equipToMove);\n  addEquip(ship, equipToMove);\n  // Remove the oldEquip from the planet\n  lodash.remove(planet.equip, (e) => e.id === equipToMove.id);\n}\n\nexport function moveEquipFromShipToPlanet(ship, planet, equipToMove) {\n  // Add to the planet\n  planet.equip.push(equipToMove);\n  if (equipToMove.type === c.EQUIP_TYPE_ARMOR) {\n    ship.armorMax -= equipToMove.armorAmt;\n    if (ship.armor > ship.armorMax) {\n      ship.armor = ship.armorMax;\n    }\n  } else if (equipToMove.type === c.EQUIP_TYPE_STORAGE) {\n    ship.resourcesMax -= equipToMove.storageAmount;\n    let shipResources = ship.resources.titanium + ship.resources.gold + ship.resources.uranium;\n    if (shipResources > ship.resourcesMax) {\n      let owing = this.removeResource(ship, 'titanium', (shipResources - ship.resourcesMax));\n      if (owing > 0) {\n        owing = this.removeResource(ship, 'gold', owing);\n      }\n      if (owing > 0) {\n        owing = this.removeResource(ship, 'uranium', owing);\n      }\n      if (owing > 0) {\n        console.warn(\"Cannot remove more resources from ship still owing \"+owing);\n      }\n    }\n  }\n  // Remove the oldEquip from the ship (no new equipment added)\n  lodash.remove(ship.equip, (e) => e.id === equipToMove.id);\n}\n\n/**\n * Removes the resource from the ship\n * @return the amount still owing after removing\n */\nexport function removeResource(ship, resourceType, amount) {\n  ship.resources[resourceType] -= amount;\n  if (ship.resources[resourceType] < 0) {\n    let owing = Math.abs(ship.resources[resourceType]);\n    ship.resources[resourceType] = 0;\n    return owing;\n  }\n  return 0;\n}\n\n/**\n * @return true if the equip can be added to the ship\n */\nexport function canEquip(ship, equip) {\n  if (!ship || !ship.equip || !equip) {\n    return false;\n  }\n  // No more space\n  if (ship.equip.length >= ship.equipMax) {\n    return false;\n  }\n  // Some equip you can only have one\n  if ([EQUIP_TYPE_BRAKE, EQUIP_TYPE_PRIMARY_WEAPON, EQUIP_TYPE_THRUSTER].includes(equip.type)) {\n    if (ship.equip.find((eq) => eq.type === equip.type)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n","import {fly, game, utils} from './';\nimport lodash from 'lodash';\nimport {getPlanetSprite, getShipSprite} from \"./game\";\n\n// IndexedDB constants\nconst WORLD_STORE = 'world';\nconst DB_NAME = 'astrominer';\nconst DB_VERSION = 1;\n\n/** Saves an object in localstorage.\n * @param objToSave: should be an Object or Array, NOT a primitive as the JSON.parse will fail\n */\nexport function saveLocalStorage(key, objToSave) {\n  const existing = localStorage.getItem(key);\n  if (existing) {\n    localStorage.removeItem(key);\n  }\n  localStorage.setItem(key, JSON.stringify(objToSave));\n}\n\n/**\n *  Loads an object from localstorage.\n * NOTE: The item stored must be an Object or Array as primitives will fail the JSON.parse\n */\nexport function loadLocalStorage(key) {\n  if (!key) {\n    console.warn('Unable to from localStorage without a key');\n    return;\n  }\n  const objString = localStorage.getItem(key)\n  //console.log('loaded objString ='+objString);\n  if (!objString) {\n    return null;\n  }\n  return JSON.parse(objString);\n}\n\nfunction upgradeDB(event) {\n  let db = event.target.result;\n  if (event.oldVersion >= 1) {\n    db.deleteObjectStore(WORLD_STORE);\n  }\n  db.createObjectStore(WORLD_STORE, { keyPath: \"saveGameName\" });\n}\n\n/**\n * Start using a newWorld, the old world and it's state will be discarded.\n * @param key : storage key where the world is kept\n */\nexport function loadWorld(key) {\n  let dbRequest = indexedDB.open(DB_NAME, DB_VERSION);\n  dbRequest.onerror = function(event) {\n    console.log('error ', event);\n  };\n  dbRequest.onupgradeneeded = upgradeDB;\n  dbRequest.onsuccess = function(event) {\n    let db = event.target.result;\n    let transaction = db.transaction([WORLD_STORE]);\n    let objectStore = transaction.objectStore(WORLD_STORE);\n    let request = objectStore.get(key);\n    request.onerror = function(event) {\n      console.log('Request error loading:', event);\n    };\n    request.onsuccess = function(event) {\n      const newWorld = request.result;\n      const oldSystem = window.world.system;\n      window.world = newWorld;\n      window.world.system = oldSystem;\n\n      // Clear the old containers of whatever they had\n      window.world.system.spriteContainers.planets.removeChildren();\n      window.world.system.planetSpriteCache = {};\n      window.world.system.shipSpriteCache = {};\n      window.world.system.spriteContainers.ships.removeChildren();\n\n      // Reset the planetCache (all new planets)\n      game.setupPlanetCache();\n\n      // Reset/Redraw all the sprites\n      window.world.ship.spriteId = null;\n      const shipSprite = getShipSprite(window.world.ship);\n      shipSprite.visible = true;\n      for (const alien of  window.world.aliens) {\n        if (alien.spriteId) {\n          alien.spriteId = null;\n          getShipSprite(alien).visible = true;\n        }\n      }\n      for (const planet of window.world.planets) {\n        if (planet.spriteId) {\n          planet.spriteId = null;\n          getPlanetSprite(planet);\n        }\n      }\n      fly.repositionScreen();\n      utils.showToast('Loaded game');\n    };\n  }\n\n}\n\nexport function saveWorld(key) {\n  const worldToStore = lodash.cloneDeep(lodash.omit(window.world, ['system']));\n  worldToStore.saveGameName = key;\n\n  let dbRequest = indexedDB.open(DB_NAME, DB_VERSION);\n  dbRequest.onerror = function(event) {\n    console.log('DB Request Error:', event);\n  };\n  dbRequest.onupgradeneeded = upgradeDB;\n  dbRequest.onsuccess = function(event) {\n    let db = event.target.result;\n    let transaction = db.transaction([WORLD_STORE], \"readwrite\");\n    let objectStore = transaction.objectStore(WORLD_STORE);\n    let objectStoreRequest = objectStore.put(worldToStore);\n    objectStoreRequest.onsuccess = function(event) {\n      utils.showToast('Saved game');\n    };\n    objectStoreRequest.onerror = function(event) {\n      console.log('failed to save ', event.target);\n    }\n  }\n}\n\nexport function deleteWorld(key) {\n  let dbRequest = indexedDB.open(DB_NAME, DB_VERSION);\n  dbRequest.onerror = function(event) {\n    console.log('DB Request Error:', event);\n  };\n  dbRequest.onupgradeneeded = upgradeDB;\n  dbRequest.onsuccess = function(event) {\n    let db = event.target.result;\n    let transaction = db.transaction([WORLD_STORE], \"readwrite\");\n    let objectStore = transaction.objectStore(WORLD_STORE);\n    let objectStoreRequest = objectStore.delete(key);\n    objectStoreRequest.onsuccess = function(event) {\n      utils.showToast('Deleted game '+key);\n    };\n    objectStoreRequest.onerror = function(event) {\n      console.log('failed to delete ', event.target);\n    }\n  }\n}\n","import React from 'react';\nimport './InfoFly.css';\n\nexport class InfoFly extends React.Component {\n\n  render() {\n    let world = window.world;\n    return (\n    <div className='section'>\n      <div>Ship</div>\n      <div>Armor {Math.floor(world.ship.armor)} / {world.ship.armorMax} </div>\n      <div>Equip (max {world.ship.equipMax})\n        {world.ship.equip.map((equip, i) => {\n          return <span key={i} className='equip'>{equip.name}</span>\n        })}\n      </div>\n      <div className='section'>Resources</div>\n      <div> Titatium {Math.floor(world.ship.resources.titanium)}</div>\n      <div> Gold {Math.floor(world.ship.resources.gold)}</div>\n      <div> Uranium {Math.floor(world.ship.resources.uranium)}</div>\n    </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport { c, manage, game } from '../functions';\nimport './ManagePlanet.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nexport class ManagePlanet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {titanium:'', gold:'', uranium:''};\n  }\n\n  valueChanged(event, resourceType) {\n    let newState = Object.assign({}, this.state);\n    newState[resourceType] = event.target.value;\n    this.setState(newState);\n  }\n\n  render() {\n    let world = window.world;\n    let planet = window.world.selectedPlanet;\n    let ship = window.world.ship;\n    let shipOnPlanet = ((planet === window.world.lastPlanetLanded) && ship.alive);\n    return (\n      <div className='planet-info'> \n        <div className='section'><b>Planet Name</b> {world.selectedPlanet.name}</div>\n        <div className='build-button'>\n          <button \n            disabled={!game.canAfford(planet, (shipOnPlanet ? ship : null), c.MINE_COST)}\n            onClick={() => manage.buildMine()}>Build Mine</button>\n            Cost: T:{c.MINE_COST.titanium} G:{c.MINE_COST.gold}\n        </div>\n        <div className='build-button'>\n          <button \n            disabled={!game.canAfford(planet, (shipOnPlanet ? ship : null), c.FACTORY_COST)}\n            onClick={() => manage.buildFactory()}>Build Factory</button>\n            Cost: T:{c.FACTORY_COST.titanium} G:{c.FACTORY_COST.gold} U:{c.FACTORY_COST.uranium}\n        </div>\n        <div className='section'><b>Resources</b></div>\n        <div>Titatium {Math.floor(planet.resources.raw.titanium)}</div>\n        <div>Gold {Math.floor(planet.resources.raw.gold)}</div>\n        <div>Uranium {Math.floor(planet.resources.raw.uranium)}</div>\n\n        {shipOnPlanet && <table>\n          <thead>\n            <tr>\n              <th>Resource</th>\n              <th>Planet</th>\n              <th>Transfer</th>\n              <th>Ship ({ship.resourcesMax})</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Titanium</td>\n              <td>{Math.floor(planet.resources.stored.titanium)}</td>\n              <td>\n                <span className='transfer-button'\n                        onClick={() => manage.transferResource(ship.resources, planet.resources.stored,\n                          'titanium', this.state.titanium, c.PLANET_RESOURCE_MAX)}><i className=\"fa fa-arrow-left\"> </i></span>\n                  <input type='text' className='transfer-input' \n                  value={this.state.titanium} \n                  onChange={(event)=>this.valueChanged(event, 'titanium')}/>\n                  <span className='transfer-button' \n                        onClick={() => manage.transferResource(planet.resources.stored, ship.resources,\n                        'titanium', this.state.titanium, ship.resourcesMax)}><i className=\"fa fa-arrow-right\"> </i></span>\n              </td>\n              <td>{Math.floor(ship.resources.titanium)}</td>\n            </tr>\n            <tr>\n              <td>Gold</td>\n              <td>{Math.floor(planet.resources.stored.gold)}</td>\n              <td>\n                <span className='transfer-button' \n                        onClick={() => manage.transferResource(ship.resources, planet.resources.stored, \n                        'gold', this.state.gold, c.PLANET_RESOURCE_MAX)}><i className=\"fa fa-arrow-left\"> </i></span>\n                  <input type='text' className='transfer-input' \n                  value={this.state.gold} \n                  onChange={(event)=>this.valueChanged(event, 'gold')}/>\n                  <span className='transfer-button' \n                        onClick={() => manage.transferResource(planet.resources.stored, ship.resources,\n                        'gold', this.state.gold, ship.resourcesMax)}><i className=\"fa fa-arrow-right\"> </i></span>\n              </td>\n              <td>{Math.floor(ship.resources.gold)}</td>\n            </tr>\n            <tr>\n              <td>Uranium</td>\n              <td>{Math.floor(planet.resources.stored.uranium)}</td>\n              <td>\n                <span className='transfer-button' \n                        onClick={() => manage.transferResource(ship.resources, planet.resources.stored, \n                        'uranium', this.state.uranium, c.PLANET_RESOURCE_MAX)}><i className=\"fa fa-arrow-left\"> </i></span>\n                  <input type='text' className='transfer-input' \n                  value={this.state.uranium} \n                  onChange={(event)=>this.valueChanged(event, 'uranium')}/>\n                  <span className='transfer-button' \n                        onClick={() => manage.transferResource(planet.resources.stored, ship.resources,\n                        'uranium', this.state.uranium, ship.resourcesMax)}><i className=\"fa fa-arrow-right\"> </i></span>\n              </td>\n              <td>{Math.floor(ship.resources.uranium)}</td>\n            </tr>\n          </tbody>\n        </table>}\n\n        {!shipOnPlanet &&\n        <table>\n          <thead>\n          <tr>\n            <th>Resource</th>\n            <th>Planet</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td>Titanium</td>\n            <td>{Math.floor(planet.resources.stored.titanium)}</td>\n          </tr>\n          <tr>\n            <td>Gold</td>\n            <td>{Math.floor(planet.resources.stored.gold)}</td>\n          </tr>\n          <tr>\n            <td>Uranium</td>\n            <td>{Math.floor(planet.resources.stored.uranium)}</td>\n          </tr>\n          </tbody>\n        </table>}\n      </div>);\n  }\n}\n\n","import React from 'react';\nimport { c, manage, game} from '../functions';\nimport './FactoryButton.css';\n\nexport class FactoryButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  build(template) {\n    if (template.objType === c.OBJ_SHIP) {\n      manage.buildShip(this.props.template);\n    } else if (template.objType === c.OBJ_EQUIP) {\n      manage.buildEquip(this.props.template);\n    }\n  }\n\n  render() {\n    let world = window.world;\n    let planet = world.selectedPlanet;\n    let ship = world.ship;\n    \n    return (\n      <div className='build-button'>\n        <button \n          disabled={!manage.hasFactory(planet) || !game.canAfford(planet, ship, this.props.template.cost)} \n          onClick={() => this.build(this.props.template)}>{this.props.template.name}</button>\n          <span className='cost'>Cost: T:{this.props.template.cost.titanium} G:{this.props.template.cost.gold} U:{this.props.template.cost.uranium}</span>\n      </div>);\n  }\n}\n\n","import React from 'react';\nimport './ManageFactory.css';\nimport { FactoryButton } from './FactoryButton';\n\nexport class ManageFactory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className='factory-info'> \n        <div className='title'> Ships </div>\n        <div className='build-ship'>\n        {window.world.blueprints.ship.map((shipTemplate, i) => {\n          return <FactoryButton key={'ship'+i} template={shipTemplate} />;\n        })}\n        </div>\n\n        <div className='title'> Equipment </div>\n        <div className='build-equip'>\n        {window.world.blueprints.equip.map((equipTemplate, i) => {\n          return <FactoryButton key={'equip'+i} template={equipTemplate} />;\n        })}\n        </div>\n      </div>);\n  }\n}\n\n","import React from 'react';\nimport { manage } from '../functions';\nimport './ManageStorage.css';\n\nexport class ManageStorage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {selectedShip:null};\n  }\n\n  viewShip(ship) {\n    this.setState({selectedShip:ship});\n  }\n\n  startUsingShip() {\n    manage.switchToShip(this.state.selectedShip);\n    this.setState({selectedShip:null});\n  }\n\n  render() {\n    let world = window.world;\n    let planet = world.selectedPlanet;\n    let currentShip = world.ship;\n    let selectedShip = this.state.selectedShip;\n    let shipOnPlanet = ((planet === window.world.lastPlanetLanded) && currentShip.alive);\n\n    // Default to selecting the current ship\n    if (!selectedShip && shipOnPlanet) {\n      selectedShip = currentShip;\n    }\n\n    let selectedShipEquip = [];\n    if (selectedShip) {\n      for (let equip of selectedShip.equip) {\n        selectedShipEquip.push(\n          <div className=\"item\" key={equip.id}>\n            {equip.name} &nbsp;\n            <button onClick={() => manage.moveEquipFromShipToPlanet(selectedShip, planet, equip)} >Remove</button>\n          </div>);\n      }\n    }\n\n    return (\n      <div>\n        <div className='storage-section'> \n          <div className='title'>Ships</div>\n          <span className='item-list'>\n            {(shipOnPlanet ? [currentShip] : []).concat(planet.ships).map((ship, i) => {\n              return <div key={i} \n                          onClick={() => this.viewShip(ship)} \n                          className={`ship ${selectedShip===ship ? 'selected-item' : 'non-selected-item'}`} >{ship.name}</div>\n            })}\n          </span>\n          <span className='item-details'>\n            { selectedShip != null && // exclude this block if no ship selected\n            <div>\n              <div className='item-attr'>\n                <button onClick={() => this.startUsingShip()} disabled={selectedShip === currentShip}>Use Ship</button>\n              </div>             \n              <div className='item-attr'><b>Name</b> {selectedShip.name} {selectedShip.id}</div>\n              <div className='item-attr'><b>Engine</b> Propulsion:{Math.floor(selectedShip.propulsion*100)} Turn:{Math.floor(selectedShip.turnSpeed*100)}</div>\n              <div className='item-attr'><b>Landing</b> Speed:{Math.floor(selectedShip.crashSpeed)} Angle:{Math.floor(selectedShip.crashAngle*10)}</div>\n              <div className='item-attr'><b>Armor</b> \n                {Math.floor(selectedShip.armor)} of {Math.floor(selectedShip.armorMax)} \n                <button onClick={() => manage.repairShip(planet, selectedShip)}\n                        disabled={selectedShip.armorMax <= selectedShip.armor} >Repair</button> \n                 &nbsp; Cost {Math.floor(selectedShip.armorMax - selectedShip.armor)} titanium\n              </div>\n              <div className='item-attr'><b>Resources Max</b>{Math.floor(selectedShip.resourcesMax)}</div>\n              <div className='item-attr'><b>Equip</b> (Max {selectedShip.equipMax})\n                {selectedShipEquip}\n              </div>\n            </div>\n            }\n          </span>\n        </div>\n\n        <div className='storage-section'> \n          <div className='title'>Equipment</div>\n          <span className='equip-list'>\n            {planet.equip.map((equip, i) => {\n              return <div key={i} className='item'>\n                {equip.name} &nbsp;\n                <button onClick={() => manage.moveEquipFromPlanetToShip(selectedShip, planet, equip)}\n                        disabled={!manage.canEquip(selectedShip, equip)}\n                >Equip</button>\n              </div>\n            })}\n          </span>\n        </div>\n      </div>);\n  }\n}\n\n","import React, {useRef} from 'react';\nimport { savegame, c } from '../functions';\nimport './ManageSystem.css';\nimport lodash from 'lodash';\n\nexport function ManageSystem() {\n  const world = window.world;\n  const nameInput = useRef(null);\n  let gameNames = savegame.loadLocalStorage(c.LOCALSTORAGE_GAME_NAMES_KEY);\n\n  /**\n   * Adds a game name to the list of saved game names.\n   */\n  function addGameName(newGameName) {\n    if (newGameName && !gameNames.includes(newGameName)) {\n      gameNames.push(newGameName)\n    }\n    savegame.saveLocalStorage(c.LOCALSTORAGE_GAME_NAMES_KEY, gameNames);\n    world.system.saveGameName = newGameName;\n  }\n\n  // If no games are saved, setup an empty list of game names\n  if (!gameNames) {\n    gameNames = [];\n    addGameName(null);\n  }\n\n  function saveGame() {\n    const saveGameName = nameInput.current.value;\n    // Save the world in indexedDB\n    savegame.saveWorld(c.DB_GAME_PREFIX+saveGameName);\n    // Save the game name in localStorage\n    addGameName(saveGameName);\n  }\n\n  function deleteGame(gameName) {\n    // TODO : confirm\n    savegame.deleteWorld(c.DB_GAME_PREFIX+gameName);\n    gameNames = lodash.remove(gameNames, (name) => name !== gameName );\n    savegame.saveLocalStorage(c.LOCALSTORAGE_GAME_NAMES_KEY, gameNames);\n    if (world.saveGameName === gameName) {\n      world.saveGameName = null;\n    }\n    if (nameInput.current.value === gameName) {\n      nameInput.current.value = '';\n    }\n  }\n\n  return (\n    <div>\n      <div className='system-section'>\n        <div className='section'><b>Current Game</b></div>\n        <input type='text' onFocus={() => world.system.isTyping = true } onBlur={() => world.system.isTyping = false } ref={nameInput} />\n        <button name=\"Save\" onClick={() => saveGame() }>Save</button>\n        <div className='section'><b>Saved Game</b></div>\n        {gameNames.map(gameName => (\n          <div key={gameName} className={'game-list-row '+(world.saveGameName === gameName ? 'selected-game' : '')}>\n            <span className='game-list-item'><button onClick={() => savegame.loadWorld(c.DB_GAME_PREFIX+gameName)}>Load </button></span>\n            <span className='game-list-item'><button onClick={() => deleteGame(gameName)}>Delete</button></span>\n            <span className='game-list-item'>{gameName}</span>\n          </div>\n        ))}\n      </div>\n    </div>);\n}\n\n","import React, {useState} from 'react';\nimport { ManagePlanet } from './ManagePlanet';\nimport './ManageTabs.css';\nimport { ManageFactory } from './ManageFactory';\nimport { ManageStorage } from './ManageStorage';\nimport {ManageSystem} from \"./ManageSystem\";\n\nexport function ManageTabs() {\n  const TAB_PLANET = 'planet';\n  const TAB_FACTORY = 'factory';\n  const TAB_STORAGE = 'storage';\n  const TAB_SYSTEM = 'system';\n\n  function getTabBody(key) {\n    if (key === TAB_PLANET) {\n      return <ManagePlanet/>;\n    } else if (key === TAB_FACTORY) {\n      return <ManageFactory/>;\n    } else if (key === TAB_STORAGE) {\n      return <ManageStorage/>;\n    } else if (key === TAB_SYSTEM) {\n      return <ManageSystem/>;\n    }\n  }\n\n  const TABS = [\n    { key: TAB_PLANET, name: 'Planet'},\n    { key: TAB_FACTORY, name: 'Factory'},\n    { key: TAB_STORAGE, name: 'Storage'},\n    { key: TAB_SYSTEM, name: 'System'},\n  ];\n  const [selectedTab, setSelectedTab] = useState(TAB_PLANET);\n\n\n  return (\n    <div className='tab-set'>\n      {TABS.map(tab =>\n        <span key={tab.key} className={`tab ${selectedTab === tab.key ? 'active-tab' : 'non-active-tab'}`}\n              onClick={() => setSelectedTab(tab.key)}\n        >{tab.name}</span>\n      )}\n      <div className='tab-body'>\n        {getTabBody(selectedTab)}\n      </div>\n    </div>);\n}\n\n","import React from 'react';\nimport { c } from './functions';\nimport './InfoPanel.css';\nimport { InfoFly } from './InfoFly';\nimport { ManageTabs } from './manage/ManageTabs';\n\nexport class InfoPanel extends React.Component {\n  render() {\n    let world = window.world;\n    if (world.system.gameState === c.GAME_STATE.MANAGE) {\n      return (<ManageTabs/>);\n    } else if (world.system.gameState === c.GAME_STATE.FLY) {\n      return (<InfoFly/>);\n    }\n    return (<div>...</div>);\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { InfoPanel } from './InfoPanel';\nimport { utils, c, game, fly, ai } from './functions';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    console.log(\"created world\");\n    window.world = game.createEmptyWorld();\n    this.pixiRef = React.createRef();\n  }\n\ncomponentDidMount() {\n  console.log(\"mounted\");\n  this.createPixiApp();\n}\n\nrender() {\n  return (\n    <table>\n      <tbody>\n      <tr>\n        <td>\n        <div ref={this.pixiRef} />\n        </td>\n        <td className='info-panel'>\n          <InfoPanel />\n        </td>\n      </tr>\n      </tbody>\n    </table>\n   );\n  }\n\n  createPixiApp = () => {\n    console.log(\"Creating PIXI app\");\n    let app = new window.PIXI.Application({width: c.SCREEN_WIDTH, height: c.SCREEN_HEIGHT});\n    app.renderer.backgroundColor = c.BLACK;\n    this.pixiRef.current.appendChild(app.view);\n    window.PIXI.loader\n      .add(c.SPRITESHEET_JSON)\n      .add(c.CRASH_JSON)\n      .load(this.setupGame);\n    window.world.system.app = app;\n  }\n\n  // Setup the App\n  setupGame = () => {\n    game.setupWorld();\n    this.setupKeyboardListeners();\n    game.changeGameState(c.GAME_STATE.FLY);\n    window.world.system.app.renderer.plugins.interaction.on('pointerdown', (event) => {\n      game.click(event);\n    });\n    window.world.system.app.ticker.add(delta => this.mainLoop(delta));\n  }\n  \n  // Main loop runs 60 times per sec\n  mainLoop = (delta) => {\n    if (window.world.system.gameLoop) {\n      game.runBuildings();\n      fly.moveBullets();\n      fly.coolAllWeapons();\n      ai.moveAliens();\n      window.world.system.gameLoop(delta);\n    }\n    this.forceUpdate()\n  }\n\n  setupKeyboardListeners = () => {\n    window.world.system.keys.left = utils.keyboardListener(\"ArrowLeft\");\n    window.world.system.keys.right = utils.keyboardListener(\"ArrowRight\");\n    window.world.system.keys.up = utils.keyboardListener(\"ArrowUp\");\n    window.world.system.keys.down = utils.keyboardListener(\"ArrowDown\");\n    window.world.system.keys.space = utils.keyboardListener(\" \");\n    window.world.system.keys.w = utils.keyboardListener(\"w\"); // up\n    window.world.system.keys.a = utils.keyboardListener(\"a\"); // left\n    window.world.system.keys.s = utils.keyboardListener(\"s\"); // down\n    window.world.system.keys.d = utils.keyboardListener(\"d\"); // right\n    window.world.system.keys.q = utils.keyboardListener(\"q\"); // thrust left\n    window.world.system.keys.e = utils.keyboardListener(\"e\"); // thrust right\n    window.world.system.keys.x = utils.keyboardListener(\"x\"); // secondary weapon\n  }\n  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}